[{"path":"https://http://josephng-bio.org/sciCSR/articles/comparison.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Comparing state transitions inferred using CSR, SHM and RNA velocity","text":"vignette show compare transitions inferred using CSR SHM using sciCSR, based RNA velocity. advised follow Basic sciCSR usage vignette first understand basic functionalities sciCSR. , use sciCSR infer state transitions B cell scRNA-seq data based CSR SHM information, utilise framework extrapolate transitions based RNA velocity, compare inferences visually. Start loading sciCSR package. run examples/analysis sciCSR FIRST time, run prepare_sciCSR() function - install python dependencies sciCSR function.","code":"library(sciCSR, quietly = TRUE) # We also need the Seurat package as sciCSR interfaces  # with Seurat data objects to manipulate scRNA-seq data library(Seurat)  # Run this if this is the first time you set up sciCSR on  # your machine; this set up the dependencies in python prepare_sciCSR() ## [1] \"All dependencies have been installed. Have fun with running sciCSR!\""},{"path":"https://http://josephng-bio.org/sciCSR/articles/comparison.html","id":"load-the-dataset","dir":"Articles","previous_headings":"","what":"Load the dataset","title":"Comparing state transitions inferred using CSR, SHM and RNA velocity","text":"example utilise B cell scRNA-seq data tonsil samples taken King et al.. Part data (donor BCP4) included sciCSR package:  dataset downloaded ArrayExpress; came form Seurat data object SHM information scBCR-seq (.e. single-cell BCR repertoire profiling) data already added cell metadata. convenience, used sciCSR generate count matrix productive sterile heavy-chain immunoglobulin transcripts, attached Seurat object. Check basic sciCSR vignette need help analysis datasets. , since going use CSR SHM information infer transitions, let’s make sure place:","code":"king <- system.file(\"extdata/King_Tonsils_BCP4.rds\", package = \"sciCSR\") king <- readRDS(king) print(king) ## An object of class Seurat  ## 320 features across 781 samples within 2 assays  ## Active assay: RNA (296 features, 274 variable features) ##  1 other assay present: IGHC ##  2 dimensional reductions calculated: umap, pca # Plot a UMAP projection DimPlot(king, label = TRUE) # SHM is already included as a column in the metadata ('IGH_MU_FREQ') # so is the BCR isotype from repertoire sequencing ('ISOTYPE')  # calculate CSR potential (if you need help on this make sure you # go through the basic sciCSR usage vignette first) king <- getCSRpotential(   SeuratObj = king, reference_based = \"human\",    c_gene_anno_name = \"ISOTYPE\" )  # We will use 'IGH_MU_FREQ' as the SHM potential # Since sciCSR expects a column 'shm' which indicates this, # create a column with this name # and just replace NA with 0 as it will cause issues with NA king$shm  <- king$IGH_MU_FREQ king$shm[which(is.na(king$shm))] <- 0"},{"path":"https://http://josephng-bio.org/sciCSR/articles/comparison.html","id":"rna-velocity-analysis","dir":"Articles","previous_headings":"","what":"RNA velocity analysis","title":"Comparing state transitions inferred using CSR, SHM and RNA velocity","text":"RNA velocity analysis typically performed using BAM files input python packages velocyto scVelo. usually start velocyto generate .loom file contains quantification spliced unspliced transcripts, used packages scVelo calculate RNA velocity generate visualisations (e.g. plot streams arrows top UMAP projection depict direction flow based RNA velocity. sciCSR, expect users run velocyto input BAM files, provide functions R interface scVelo backend perform RNA velocity calculations. , can stay within R perform analyses! made avaialble 2 .loom files corresponds scRNA-seq data shown . large included sciCSR package , can download try : , sequencing reads cells BCP004 samples come two sequencing libraries, one specifically memory B cells (MBC) another total B cells. .loom files contain counts unspliced spliced transcripts cell represented two libraries. goal first merge two count matrices standard gene expression counts stored Seurat data object, pass merged data scVelo calculate RNA velocity. sciCSR offers functions merge .loom files one subsequently Seurat object, export scVelo’s use means python AnnData object. first, let’s deeper look exactly outstanding issues sciCSR trying solve task. can actually see sequencing library information reflected Seurat data object:  prefixes BCP4_MBC_ BCP4_Total_ appended cell barcodes. inspect two .loom files separately, isn’t case: case, although cell barcodes also appended prefix, formats different: Seurat object, BCP4_Total_, BCP004_Total: (notice ‘BCP004’ versus ‘BCP4’, underscore/colon trailing end). cause problems merging addressed. Luckily, sciCSR offer function combineLoomFiles() allows combine separate loom files one, checking discrepancies cell barcodes try correct . need pass Seurat object one arguments call function, time give list sample names, order vector loom files supply - see : next ready merge unspliced spliced counts annotated data object. Since going rely python pacakge scVelo RNA velocity analysis, convert Seurat object AnnData file, merge velocyto data AnnData object - provide two separate functions, convertSeuratToH5ad() mergeVelocytoWithGEX(). file King_Tonsils_BCP4_assay-RNA_velocyto.h5ad contains unspliced/spliced transcript counts can used input scVelo RNA velocity calculation pipeline. sciCSR provide R function run_scVelo() calls scVelo backend perform calculation - need supply file new filename calculated RNA velocity statistics stored. can project RNA velocity results onto UMAP using plotting functionalities within scVelo. , sciCSR can calling function R without need code python - sciCSR calls scVelo backend return plot within R:  now RNA velocity plot based code entirely R (sciCSR magic python backend)! can also plot RNA velocity grid arrows rather arrow streams :","code":"loom_files <- c(   \"https://josephng-bio.org/assets/suppdata/BCP004_Total.loom\",   \"https://josephng-bio.org/assets/suppdata/BCP004_MBC.loom\" )  for(file in loom_files){   download.file(file, destfile = basename(file), mode = 'wb') } # There is a column 'Sample' in the Seurat object that contains # this information # We can show this by colours on the UMAP DimPlot(king, group.by = \"Sample\") # This is also reflected in the cell barcodes # Cells from the MBC library print(head(Cells(king)[which(king$Sample == \"BCP4_MBC\")])) ## [1] \"BCP4_MBC_AAACCTGCATAGTAAG\" \"BCP4_MBC_AAAGCAAGTACCAGTT\" ## [3] \"BCP4_MBC_AAAGCAAGTAGGCTGA\" \"BCP4_MBC_AACACGTAGATGTAAC\" ## [5] \"BCP4_MBC_AACTCAGCAAGTAATG\" \"BCP4_MBC_AACTGGTAGAGACGAA\" # Cells from the Total library print(head(Cells(king)[which(king$Sample == \"BCP4_Total\")])) ## [1] \"BCP4_Total_AAATGCCTCGCCTGAG\" \"BCP4_Total_AACACGTTCTAACGGT\" ## [3] \"BCP4_Total_AACCATGAGAATTGTG\" \"BCP4_Total_AACCGCGGTCAGAGGT\" ## [5] \"BCP4_Total_AACCGCGGTTACCGAT\" \"BCP4_Total_AACTCAGCAAGCCCAC\" # the function 'read.loom.matrices' simplified fron the one in the  # velocyto.R package can read each loom matrix separately # here read one just to see what's in there mbc_loom <- read_loom_matrices(basename(loom_files[1])) print(summary(mbc_loom)) ##           Length   Class     Mode ## spliced   39272998 dgCMatrix S4   ## unspliced 39272998 dgCMatrix S4   ## ambiguous 39272998 dgCMatrix S4 # the loom file basically contain 3 matrices, one for spliced transcript  # counts, one for unspliced and one for ambiguous (i.e. it can't tell # whether it is spliced or not) # just print the top corner of the spliced matrix here print(mbc_loom[[\"spliced\"]][1:3, 1:3]) ## 3 x 3 sparse Matrix of class \"dgCMatrix\" ##            BCP004_Total:AAAGATGCACTAGTAC BCP004_Total:AAAGATGGTTGTCGCG ## FAM138A                                .                             . ## AL627309.1                             .                             . ## AL627309.3                             .                             . ##            BCP004_Total:AAAGCAACACGGATAG ## FAM138A                                . ## AL627309.1                             . ## AL627309.3                             . # merging loom files combineLoomFiles(   loom_files = c(\"BCP004_Total.loom\", \"BCP004_MBC.loom\"),   new_loom_filename = 'King_Tonsils_BCP4_combined.loom',   SeuratObj = king,    # the order below corresponds to the order in the argument 'loom_files'   sample_names = c(\"BCP4_Total\", \"BCP4_MBC\"),    seurat_sample_column = \"Sample\" ) ## Assuming the order in sample_names correspond to the order in loom_files. If this is not the case please rerun this function ensuring the order of these vectors match up. ## [1] \"Loom object with velocyto spliced/unspliced counts written to file 'King_Tonsils_BCP4_combined.loom'.\" # convert the Seurat object into AnnData convertSeuratToH5ad(   SeuratObj = king, assays = \"RNA\",   h5ad_filename = \"King_Tonsils_BCP4.h5ad\" ) ## [1] \"King_Tonsils_BCP4_assay-RNA.h5ad\" # add velocyto loom data into AnnData mergeVelocytoWithGEX(   anndata_file = \"King_Tonsils_BCP4_assay-RNA.h5ad\",   loom_file = 'King_Tonsils_BCP4_combined.loom',   anndata_out_filename = 'King_Tonsils_BCP4_assay-RNA_velocyto.h5ad' ) ## [1] \"AnnData file with velocyto counts merged is written to King_Tonsils_BCP4_assay-RNA_velocyto.h5ad\" # split into wt and kd run_scVelo(   anndata_file = \"King_Tonsils_BCP4_assay-RNA_velocyto.h5ad\",   anndata_out_filename = \"King_Tonsils_BCP4_assay-RNA_velocyto_scVelo.h5ad\" ) plot_arrows(   anndata_file = \"King_Tonsils_BCP4_assay-RNA_velocyto_scVelo.h5ad\",    # we are using RNA velocity information to project arrows   based_on = \"velocity\",   # we want to indicate cell cluster (in the column 'CellType'    # of the metadata) using different colours   colour.by = \"CellType\",   # you can indicate a comma-separated list of colours    # each corresponding to a CellType (this is optional)   cols = c(\"#F8766D\", \"#DE8C00\", \"#B79F00\", \"#7CAE00\", \"#00BA38\",             \"#00C08B\", \"#00BFC4\", \"#00B4F0\", \"#619CFF\", \"#C77CFF\",            \"#F564E3\", \"#FF64B0\"),   style = \"stream\" ) plot_arrows(   anndata_file = \"King_Tonsils_BCP4_assay-RNA_velocyto_scVelo.h5ad\",    # we are using RNA velocity information to project arrows   based_on = \"velocity\",   # we want to indicate cell cluster (in the column 'CellType'    # of the metadata) using different colours   colour.by = \"CellType\",   # you can indicate a comma-separated list of colours    # each corresponding to a CellType (this is optional)   cols = c(\"#F8766D\", \"#DE8C00\", \"#B79F00\", \"#7CAE00\", \"#00BA38\",             \"#00C08B\", \"#00BFC4\", \"#00B4F0\", \"#619CFF\", \"#C77CFF\",            \"#F564E3\", \"#FF64B0\"),   # indicate 'grid' if you want to plot arrows onto a grid of fixed points   style = \"grid\",   # (Optional) you can give the plot a customised title as well   title = \"King et al. Donor BCP4 RNA velocity on a grid\" )"},{"path":"https://http://josephng-bio.org/sciCSR/articles/comparison.html","id":"plotting-transitions-based-on-csr-and-shm","dir":"Articles","previous_headings":"","what":"Plotting transitions based on CSR and SHM","title":"Comparing state transitions inferred using CSR, SHM and RNA velocity","text":"Since sciCSR infers transitions using CSR /SHM information, ideally want also visualise , compare inferred transitions based RNA velocity. can projecting transitions onto UMAP similar shown RNA velocity, thanks functionalities support CellRank package. show , however, points caution: Inferred transitions based CSR /SHM can substantially different based RNA velocity. Specifically, fairly conceivable depending dataset, even using CSR/SHM see much prominent transitional flows. Part may genuine (e.g. sampling mainly mature B cells steady state little difference CSR/SHM patterns) - fact, noticed one common problem RNA velocity prominence flows (sometimes even pointing counterintuitive direction) mature immune cell types little dynamical behaviour expected. Another potential reason lack prominent flows sort visualisation , cells necessarily organised states defined using CSR/SHM information UMAP. example, IgG1+ IgA1+ B cells may occupy similar positions UMAP projection simply share transcriptomic similarities outside immunoglobulin loci. case, even conceivable can G1--A1 transition, projection arrows onto UMAP reduction isn’t particularly helpful may states positioning UMAP way can highlight transitions using arrows. Anyway, enough health warning - can also use plot_arrows() function project CSR/SHM information onto UMAP. Just indicate based_on argument:  another plot using SHM information:","code":"# Let's say we want to first project CSR-inferred transitions  # onto the UMAP  plot_arrows(   anndata_file = \"King_Tonsils_BCP4_assay-RNA_velocyto_scVelo.h5ad\",    # allowed values: 'velocity' (default), 'csr' or 'shm'   based_on = \"csr\",   colour.by = \"CellType\",   cols = c(\"#F8766D\", \"#DE8C00\", \"#B79F00\", \"#7CAE00\", \"#00BA38\",             \"#00C08B\", \"#00BFC4\", \"#00B4F0\", \"#619CFF\", \"#C77CFF\",            \"#F564E3\", \"#FF64B0\"),   style = \"stream\" ) plot_arrows(   anndata_file = \"King_Tonsils_BCP4_assay-RNA_velocyto_scVelo.h5ad\",    based_on = \"shm\",   colour.by = \"CellType\",   cols = c(\"#F8766D\", \"#DE8C00\", \"#B79F00\", \"#7CAE00\", \"#00BA38\",             \"#00C08B\", \"#00BFC4\", \"#00B4F0\", \"#619CFF\", \"#C77CFF\",            \"#F564E3\", \"#FF64B0\"),   style = \"stream\" )"},{"path":"https://http://josephng-bio.org/sciCSR/articles/comparison.html","id":"more-detailed-comparisons","dir":"Articles","previous_headings":"","what":"More detailed comparisons","title":"Comparing state transitions inferred using CSR, SHM and RNA velocity","text":"visualisations clearly show similarities (example, transitions MBC pointing towards direction germinal center [GC]) differences (e.g. strong transitions GC based RNA velocity appears backed CSR/SHM) inferences based RNA velocity versus CSR/SHM. sciCSR provides functionalities compare different sets inferred transitions. One way gain insights apply Transition Path Theory (TPT) estimate amount fluxes states - covered TPT basic sciCSR usage vignette. may want take look vignette see can . show another way answer question ‘different transitions inferred using CSR/SHM based RNA velocity’. sciCSR uses CSR/SHM information fit models state transitions using Markov State Models (MSM). One powerful properties MSM , specify transition likelihoods every state data, can ‘generate’/‘simulate’ new transitions data new cell follow moves across landscape states. Similar MSMs produce similar pathways transitions across landscape; can take note frequencies state visited simulated pathways, derive numerical metric quantify similarity terms frequencies visiting states MSM-simulated paths (Illustration ).  sciCSR, way can perform analysis , first fit transition models obtain separate R objects store models. can use function compareTransitionMatrices() quantify similarities transition models: output function list two elements: sampled_transitions frequencies transition (.e. case, moves one cell type another) visited pathways sampled considering transition model fitted using velocity/CSR/SHM information. Another element list (name distance) matrix shows difference pair transition matrix, ordered based one given matrix_list. values matrix divergence metric (case Kullback-Leibler divergence) quantify different transitions implicated one distance matrix different another. larger value, different implied transitions .  Based plot, can see velocity-based transitions substantially different based CSR/SHM information. serves overall metric quantify differences transition models, whilst arrow projection /TPT-based fluxes, outputs different sciCSR functions, allow study exactly differences inferences made using type biological information (velocity/CSR/SHM)!","code":"# Let's first fit transition models using velocity/CSR/SHM # separately using fitTransitionModel()  # Velocity g_velo <- fitTransitionModel(   anndata_file = \"King_Tonsils_BCP4_assay-RNA_velocyto_scVelo.h5ad\",   mode = \"velocity\" ) # CSR g_csr <- fitTransitionModel(   anndata_file = \"King_Tonsils_BCP4_assay-RNA_velocyto_scVelo.h5ad\",   mode = \"pseudotime\", pseudotime_key = \"csr_pot\" ) # SHM g_shm <- fitTransitionModel(   anndata_file = \"King_Tonsils_BCP4_assay-RNA_velocyto_scVelo.h5ad\",   mode = \"pseudotime\", pseudotime_key = \"shm\" )  comparison <- compareTransitionMatrices(   # these are the transition matrices based on   # velocity/CSR/SHM   matrix_list = list(g_velo$transition_matrix,                      g_csr$transition_matrix,                      g_shm$transition_matrix),   SeuratObj = king, cells = Cells(king),   # how do we want to group the cells? we will describe   # each step in the simulated pathways using this   # in this case we want to describe pathways in terms   # of what cell type   group.by = 'CellType',   # We will compare these simulated paths using Kullback-   # Leibler divergence on the frequencies each state is visited   distance_metric = 'KL' ) ## Sampling realisations from Markov chain 1 ... ## Sampling realisations from Markov chain 2 ... ## Sampling realisations from Markov chain 3 ... ## Comparing the list of transition models ... ## Metric: 'kullback-leibler' using unit: 'log2'; comparing: 3 vectors. distance_matrix <- comparison$distance rownames(distance_matrix) <- c(\"Velocity\", \"CSR\", \"SHM\") colnames(distance_matrix) <- c(\"Velocity\", \"CSR\", \"SHM\")  # We can plot this matrix as a heatmap library(pheatmap) pheatmap(distance_matrix, display_numbers = TRUE, number_format = \"%.4f\")"},{"path":"https://http://josephng-bio.org/sciCSR/articles/csr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analysing Class-Switch Recombination in B cell scRNA-seq data using sciCSR","text":"vignette demonstrate basic functions sciCSR analyse CSR. Wherever applicable, explanations theoretical background sciCSR kept brief vignette. encouraged consult sciCSR manuscript details. provide concise summary basic background level guiding application sciCSR package real scRNA-seq dataset. Start loading sciCSR package. run examples/analysis sciCSR FIRST time, run prepare_sciCSR() function - install python dependencies sciCSR function.","code":"library(sciCSR, quietly = TRUE) # We also need the Seurat package as sciCSR interfaces  # with Seurat data objects to manipulate scRNA-seq data library(Seurat)  # Run this if this is the first time you set up sciCSR on  # your machine; this set up the dependencies in python prepare_sciCSR() ## [1] \"All dependencies have been installed. Have fun with running sciCSR!\""},{"path":"https://http://josephng-bio.org/sciCSR/articles/csr.html","id":"load-the-dataset","dir":"Articles","previous_headings":"","what":"Load the dataset","title":"Analysing Class-Switch Recombination in B cell scRNA-seq data using sciCSR","text":"subset data Hong et al. used example; dataset, knockout p19 component Il23 reduces class-switching IgG2b isotype mice. shall use sciCSR reproduce finding. included sciCSR susbet data consisting 4000 cells ~ 200 genes.","code":"hong_sampled <- system.file(\"extdata/hong_sampled.rds\", package = \"sciCSR\") hong_sampled <- readRDS(hong_sampled) hong_sampled ## An object of class Seurat  ## 202 features across 3000 samples within 1 assay  ## Active assay: RNA (202 features, 192 variable features) ##  2 dimensional reductions calculated: pca, umap"},{"path":"https://http://josephng-bio.org/sciCSR/articles/csr.html","id":"integrating-scbcr-seq-repertoire-data","dir":"Articles","previous_headings":"","what":"Integrating scBCR-seq repertoire data","title":"Analysing Class-Switch Recombination in B cell scRNA-seq data using sciCSR","text":"scBCR-seq (, single-cell BCR repertoire) data set cells also available publication. integrate data Seurat object can benefit scBCR-seq data calculate SHM levels cells. sciCSR can also benefit isotype calls scBCR-seq group cells isotypes (whilst can theory also identified using scRNA-seq reads [see ], since scBCR-seq libraries enriched BCR transcripts isotype calls typically reliable). publication, Hong colleagues also make use scBCR-seq data remove non-B-cells analysis. sciCSR provides series functions process repertoire data tables, either form cellranger vdj “filtered contig” CSV files standard AIRR format files (indeed tabular format long cell barcodes available tables). can add selected features repertoire annotations metadata Seurat data object. case filtered contig annotation files cellranger vdj, annotations contain information regarding SHM (e.g. sequence identity compared assigned germline alleles). ran IMGT/HighV-Quest filtered contig sequences obtained AIRR format table output. read cellranger contig annotations, merge IgBLAST AIRR output, proceed extract features merged table adding Seurat data object. wish use SHM information sciCSR, make sure re-analyse scBCR-seq contigs another tool (e.g. IMGT/HighV-Quest, pRESTO, IgBLAST etc., custom -house scripts) merging data! collapseBCR annotate cell singlet/doublet etc. based number heavy & light transcripts associated cell barcode. resulting data frame fewer lines input data frame - collapseBCR reduces input data cell, 1 H 1 L sequences retained merging Seurat object. full table without removing sequences can also accessed, indicating full.table = TRUE calling collapseBCR. shows addition annotations operating directions, .e. extracting data Seurat object metadata add repertoire tables, extracting repertoire annotations merging Seurat object additional metadata columns.  see isotype annotations available group cells confined top right corner UMAP projection - whilst minority cells group available isotype information (probably BCR transcripts sampled preparing scBCR-seq library), cells outside quadrant UMAP mostly absent isotype information - probably non B cells aren’t interested sciCSR analysis. Let’s subset dataset retain B cells, using presence BCR transcripts repertoire data marker expression (Cd19, Ms4a1 (CD20)) criteria filtering: Note: Others (e.g. Immcantation framework) provided alternative routes merge repertoire annotations Seurat data object. Feel free choose whichever tool feel comfortable . long columns indicating BCR isotypes sequence identity germline alleles Seurat data object metadata, can proceed use sciCSR’s functionalities inferring transitions using CSR/SHM information.","code":"# this is the filtered_contig_annotations.csv file from cellranger vdj vdj <- system.file(\"extdata/hong_sampled_cellranger_vdj.csv\", package = \"sciCSR\") vdj <- read.csv(vdj, stringsAsFactors = FALSE)  # this is the AIRR-format output from IMGT/HighV-Quest vquest <- system.file(\"extdata/hong_sampled_vquest_airr.tsv\", package = \"sciCSR\") vquest <- read.table(vquest, sep = \"\\t\", stringsAsFactors = FALSE, header = TRUE)  # The % sequence identity to germline V allele is the column 'v_identity' # We want to merge this column into cellranger vdj output  # using the sequence IDs as keys vdj <- merge(vdj, vquest[, c(\"sequence_id\", \"v_identity\")],              by.x = \"contig_id\", by.y = \"sequence_id\",               all.x = TRUE, all.y = FALSE, sort = FALSE) collapsed <- collapseBCR(vdj, format = \"10X\") # We can add annotations from the Seurat Object into the VDJ table # e.g. we add 'Status' (WT/KD) from Seruat object into the repertoire  # annotations collapsed <- AddCellMetaToVDJ(   vdj = collapsed,   SeuratObj = hong_sampled,   metadata_col = c(\"Status\") )  # We can add data the other way round, i.e. select features from # repertoire and add them to the Seurat Object  # First make sure we have a column in the vdj table which corresponds to # sample names - this column must be called 'sample_name' # In this case it is the column 'donor' - first rename this to 'sample_name' colnames(collapsed)[which(colnames(collapsed) == \"donor\")] <- \"sample_name\" hong_sampled <- combineBCR(   collapsed, hong_sampled,   # list the columns from vdj you wish to add to the Seurat object down here   keep_columns = c(\"v_gene\", \"d_gene\", \"j_gene\", \"c_gene\",                     \"v_identity\", \"full_length\",                     \"productive\", \"cdr3\", \"cdr3_nt\",                     \"reads\", \"umis\") )  # plot DimPlot but colour by isotype from the vdj data # to confirm the data merging has happened DimPlot(hong_sampled, group.by = \"IGH_c_gene\") # there is a column 'bcr_type' added to the Seurat object which indicates # whether the cell is singlet/doublet etc. cells without BCR transcripts will # be labelled NA hong_b <- hong_sampled[, Cells(hong_sampled)[which(!is.na(hong_sampled$bcr_type))]]  # subset to retain those cells positive for both CD19 and CD20 transcripts hong_b <- subset(hong_b, subset = (Ms4a1 > 0 & Cd19 > 0))  # Since we have subset the data, rerun FindNeighbors hong_b <- FindNeighbors(hong_b) ## Computing nearest neighbor graph ## Computing SNN"},{"path":"https://http://josephng-bio.org/sciCSR/articles/csr.html","id":"enumerating-productive-and-sterile-immunoglobulin-heavy-chain-transcripts","dir":"Articles","previous_headings":"","what":"Enumerating productive and sterile immunoglobulin heavy chain transcripts","title":"Analysing Class-Switch Recombination in B cell scRNA-seq data using sciCSR","text":"first step run sciCSR identify count productive sterile immunoglobulin heavy chain transcripts. transcripts separately annotated conventional scRNA-seq data pre-processing, crucial understand dynamics CSR: sterile transcription pre-conditions B cells class-switch particular isotype. sciCSR implements set functions perform enumeration; required input BAM files data pre-processing pipeline (e.g. cellranger 10X). cell barcodes may match cell barcodes Seurat object, since Seurat object formed aggregating data different libraries. function ‘repairBarcode’ go Seurat object make sure cell barcodes count matrices match Seurat object: Now productive/sterile transcript count matrix, want merge count matrix new ‘assay’ Seurat object. Occassionally, might B cells productive/sterile reads (case 2 cells). cause problems merging data. can add back matrix proceed creation new assay: Note: step can take substantial amount time depending size BAM files. may choose use high-performance computing (HPC) resources access . said, entirely feasible run functions count productive sterile transcripts standard modern desktop computer, hours’ time. Now productive/sterile transcript count per cell, added separate ‘assay’ Seurat object - snippet count matrix: can see Igh C gene, three separate counts: ‘-S’: correspond sterile transcripts; ‘-P’: correspond productive transcripts; ‘-C’: corresponds transcripts classified sterile productive (e.g. 1 read mapping coding exons found, case can either sterile productive, confidence assign either category). can manipulate, normalise visualise data just like count data. example, log-normalise data plot bubble plot comparing WT cells Il23-/- cells:  can see already, without inference, Il23 knockouts lower expression level IgG2 subtypes.","code":"# We first need to load the genomic coordinates of the V, D and J genes # change to 'human_definitions' if you are working on human data data(\"mouse_definitions\")  # we need to supply the list of BAM files associated with the scRNA-seq # in this case we have five libraries, a subset of the BAM file corresponding # to the cells are available in the package bamfiles <- c(   system.file(\"extdata/Hong_S1_sampled_Igh.bam\", package = \"sciCSR\"),   system.file(\"extdata/Hong_S2_sampled_Igh.bam\", package = \"sciCSR\"),   system.file(\"extdata/Hong_S3_sampled_Igh.bam\", package = \"sciCSR\"),   system.file(\"extdata/Hong_S4_sampled_Igh.bam\", package = \"sciCSR\"),   system.file(\"extdata/Hong_S5_sampled_Igh.bam\", package = \"sciCSR\") )  # loop through these BAM files hong_IGH <- lapply(bamfiles, function(bamfile){   cat(paste0(bamfile, \" ...\\n\"))   # These three functions count productive and sterile   # reads from the BAM file and give a count matrix   out <- getIGHmapping(bamfile, mouse_definitions)   out2 <- getIGHreadType(out$read_count)   out3 <- summariseIGHreads(out2, mouse_definitions)   # 'out3' is a count matrix of productive/sterile transcript    # of each isotype per cell   out3   }) ## /private/var/folders/n3/lvcd6wn56qjfwd2j66n8bqzh0000gn/T/RtmpVxCxwl/temp_libpath2c374fe31bd0/sciCSR/extdata/Hong_S1_sampled_Igh.bam ... ## Fetching reads mapped to VDJ genes ... ## Fetching reads mapped to C gene coding regions ... ## Fetching reads mapped to C gene 5' regions ... ## /private/var/folders/n3/lvcd6wn56qjfwd2j66n8bqzh0000gn/T/RtmpVxCxwl/temp_libpath2c374fe31bd0/sciCSR/extdata/Hong_S2_sampled_Igh.bam ... ## Fetching reads mapped to VDJ genes ... ## Fetching reads mapped to C gene coding regions ... ## Fetching reads mapped to C gene 5' regions ... ## /private/var/folders/n3/lvcd6wn56qjfwd2j66n8bqzh0000gn/T/RtmpVxCxwl/temp_libpath2c374fe31bd0/sciCSR/extdata/Hong_S3_sampled_Igh.bam ... ## Fetching reads mapped to VDJ genes ... ## Fetching reads mapped to C gene coding regions ... ## Fetching reads mapped to C gene 5' regions ... ## /private/var/folders/n3/lvcd6wn56qjfwd2j66n8bqzh0000gn/T/RtmpVxCxwl/temp_libpath2c374fe31bd0/sciCSR/extdata/Hong_S4_sampled_Igh.bam ... ## Fetching reads mapped to VDJ genes ... ## Fetching reads mapped to C gene coding regions ... ## Fetching reads mapped to C gene 5' regions ... ## /private/var/folders/n3/lvcd6wn56qjfwd2j66n8bqzh0000gn/T/RtmpVxCxwl/temp_libpath2c374fe31bd0/sciCSR/extdata/Hong_S5_sampled_Igh.bam ... ## Fetching reads mapped to VDJ genes ... ## Fetching reads mapped to C gene coding regions ... ## Fetching reads mapped to C gene 5' regions ... hong_IGH2 <- repairBarcode(   hong_IGH, hong_b,   sample_names = c(\"p19kd_1\", \"p19kd_2\", \"p19kd_3\", \"WT_4\", \"WT_5\"),    seurat_sample_column = \"Sample\" ) ## Assuming the order in sample_names correspond to the order in data_list. If this is not the case please rerun this function ensuring the order of these vectors match up. # combine these individual count matrices hong_IGH2 <- do.call(\"rbind\", hong_IGH2)  # remove cells which are not in the Seurat object but happen to have # observed productive/sterile transcripts hong_IGH2 <- hong_IGH2[which(rownames(hong_IGH2) %in% Cells(hong_b)), ] hong_IGH2 <- rbind(   hong_IGH2,    # a zero matrix for those 'missing' cells   matrix(0,           # number of cells 'missing' in the productive/sterile count matrix          nrow = sum( ! Cells(hong_b) %in% rownames(hong_IGH2)),           # number of productive/sterile transcripts          ncol = ncol(hong_IGH2),          dimnames =  list(             # these are the cells without observed productive/sterile reads            Cells(hong_b)[which(!Cells(hong_b) %in% rownames(hong_IGH2))],            # productive/sterile transcript names            colnames(hong_IGH2)          ), byrow = TRUE) ) hong_IGH2 <- t( hong_IGH2 ) hong_b[['IGHC']] <- CreateAssayObject( counts = hong_IGH2 ) ## Warning: Feature names cannot have underscores ('_'), replacing with dashes ## ('-') slot(hong_b[[\"IGHC\"]], \"counts\")[1:9, 1:3] ## 9 x 3 sparse Matrix of class \"dgCMatrix\" ##         CTCGAAACACTTACGA-3 TTAGTTCAGCTAACAA-2 TAGCCGGCAGCTGCAC-5 ## Ighm-S                   .                  2                  1 ## Ighm-P                   .                  7                  . ## Ighm-C                   .                  6                  . ## Ighg3-S                  .                  .                  . ## Ighg3-P                  .                  .                  . ## Ighg3-C                  1                  .                  . ## Ighg1-S                  .                  .                  . ## Ighg1-P                  .                  .                  . ## Ighg1-C                  7                 15                  4 # Normalisation; 'IGHC' is the assay that holds the  # sterile/productive count data hong_b <- NormalizeData( hong_b, assay = \"IGHC\" )  genes <- rownames(hong_b[[\"IGHC\"]]) # Let's say we want to plot only the sterile and productive counts genes <- genes[which(grepl(\"-[SP]$\", genes))] DotPlot(hong_b, assay = \"IGHC\", features = genes, group.by = \"Status\") +   RotatedAxis()"},{"path":"https://http://josephng-bio.org/sciCSR/articles/csr.html","id":"inferring-transitions-using-csr-and-shm-information","dir":"Articles","previous_headings":"","what":"Inferring transitions using CSR and SHM information","title":"Analysing Class-Switch Recombination in B cell scRNA-seq data using sciCSR","text":"sciCSR argue quantification sterile productive transcripts can used evidence build models cell state transitions, similar RNA velocity used interpret dynamics trajectory cell differentiation. , can make use sterile productive transcript count data infer patterns CSR WT knockout conditions; expect reproduce main finding Hong et al. manuscript Il23 knockouts bias cells away IgG2b (authors established protein level using immunofluorescence techniques). sciCSR calculates “CSR potential” ranks cells naive state memory/plasma cell state, based expression pattern sterile productive IgH transcripts. ensure CSR potential scores can compared across conditions datasets, making use reference B cell atlases training isotype “signatures” (.e. expression pattern isotypes’ sterile productive transcripts altogether) references applied user-supplied datasets. use CSR potentials “pseudotime” ordering cells; provided inputs CellRank method infer transitions. , instead RNA velocity typically used input CellRank, derive CSR-based pseudotime ordering infer transitions B cell states. Alternatively, sciCSR can also build transition models, using SHM level input. function getSHM() calculate SHM level using formula: \\[SHM = 1 - \\text{sequence identity germline V gene (%)}\\] Now necessary data perform inference transitions. sciCSR, rely python package CellRank packages underlying calculations. First convert Seurat object AnnData (.h5ad) files. case want consider transitions WT knockout conditions separately. Split AnnData two separate files: Every time functions called, resulting AnnData filenames written can keep track locations new files crucial inputs next steps. now use two AnnData files input infer transitions separately wild-type knockout conditions. , use CSR SHM potentials pseudotime build cell-cell transition matrix gives probability transitioning state one cell every cell data. inference performed using CellRank, following default settings - change use CSR/SHM information rather pseudotime calculated using means: sciCSR uses series python packages (scanpy, CellRank, deeptime etc.) load data infer transitions - python called backend perform analysis R thanks sciCSR package! ideally like form visualisation demonstrate difference inferred transitions. case, ideally expect visualisation indicates knockout condition fewer switches involving IgG2b given experiments demonstrated Hong et al. manuscript. can attempt plot arrows similar conventional RNA velocity projection UMAP plots. However, doesn’t always work analysing class-switching, since quite often cells different isotypes necessarily occupy distinct spaces UMAP projection - many transcripts driving variations data dictates sit dimensionality projection. , projecting arrows directly top UMAP may informative. sciCSR, offer alternative arrow visualisation, passing inferred transitions Transition Path Theory (TPT) summarise transitions states (e.g. isotypes) ‘fluxes’. TPT popular tool mainly chemistry physics analysing transitions different conformational state molecules. , repurpose TPT summarise transitions cellular states. analysing CSR, can consider isotypes states, TPT group cells isotypes calculate amount ‘flux’ one isotype another. Putting inferred transition matrix another step also another advantage, can perform computation estimate significance inferred flux, generating randomised models reshuffling transition matrix comparing observed magnitudes fluxes randomised models. randomisation gives us guidance -weigh transitions likely improbable artefactual merely arisen due structure data. TPT related randomisation routines implemented function fitTPT Aside AnnData file output fitTransitionModel, need indicate followings run fitTPT: group.cells.: like define states data? case want group cells BCR isotypes, consider flux one isotype another proxy likelihood class-switching specific pairs isotypes. source_state target_state: apply TPT need indicate source state target state algorithm consider likely paths starting one state (‘source’) finally reaching another given state (‘target’), regardless traversals middle ‘journey’. advise choose source target states far possible apart one another. example, analyse CSR mouse ideal setting choose IgM source IgA target. important aren’t actually interested switching IgM IgA - merely asks algorithm consider full spectrum switches possible, important TPT results change omit states involved important transitions implicated data. Finally, chosen source target states need present data (example, cells IgA+ data, choosing IgA target state result error).","code":"# calculate CSR potential hong_b <- getCSRpotential(   SeuratObj = hong_b,    # Here we use the isotype information from the merged    # repertoire annotations. Column 'IGH_c_gene' stores    # this information   c_gene_anno_name = \"IGH_c_gene\",    # Specify this is a mouse dataset. Change to 'human'    # if you work on human data   reference_based = \"mouse\" ) ## Regressing out nCount_RNA ## Centering and scaling data matrix # get SHM frequency (= 1 - IGH_v_identity) # we have merged the germline identity information from the # repertoire to the Seurat object (column 'IGH_v_identity') hong_b <- getSHM(hong_b, v_identity_anno_name = \"IGH_v_identity\") convertSeuratToH5ad(hong_b, assays = c(\"RNA\"), \"hong_sampled_bcells.h5ad\") ## [1] \"hong_sampled_bcells_assay-RNA.h5ad\" # This information is stored in the 'Status' column in the  # Seurat object metadata splitAnnData(   anndata_file = \"hong_sampled_bcells_assay-RNA.h5ad\",   split.by = \"Status\", levels = c(\"WT\", \"IL23-/-\") ) ## Subsetting AnnData for Status == 'WT' ... ## Subsetting AnnData for Status == 'IL23-/-' ... ## [1] \"./hong_sampled_bcells_assay-RNA_WT.h5ad\"     ## [2] \"./hong_sampled_bcells_assay-RNA_IL23--.h5ad\" # fit transitions based on CSR # First Wild-Type g_wt_csr <- fitTransitionModel(   anndata_file = \"hong_sampled_bcells_assay-RNA_WT.h5ad\",   mode = \"pseudotime\", pseudotime_key = \"csr_pot\" ) # Knockout g_ko_csr <- fitTransitionModel(   anndata_file = \"hong_sampled_bcells_assay-RNA_IL23--.h5ad\",   mode = \"pseudotime\", pseudotime_key = \"csr_pot\" )  # fit transitions based on SHM # First Wild-Type g_wt_shm <- fitTransitionModel(   anndata_file = \"hong_sampled_bcells_assay-RNA_WT.h5ad\",   mode = \"pseudotime\", pseudotime_key = \"shm\" ) # Knockout g_ko_shm <- fitTransitionModel(   anndata_file = \"hong_sampled_bcells_assay-RNA_IL23--.h5ad\",   mode = \"pseudotime\", pseudotime_key = \"shm\" ) # the function fitTPT() apply TPT on the transition  # matrices inferred using fitTransitionModel  # TPT on the CSR-based matrices tpt_ko_csr <- fitTPT(   anndata_file = \"hong_sampled_bcells_assay-RNA_IL23--.h5ad\",   CellrankObj = g_ko_csr, group.cells.by = \"isotype\",   source_state = 'M', target_state = 'A' ) tpt_wt_csr <- fitTPT(   anndata_file = \"hong_sampled_bcells_assay-RNA_WT.h5ad\",   CellrankObj = g_wt_csr, group.cells.by = \"isotype\",   source_state = 'M', target_state = 'A' )  # TPT on the SHM-based matrices tpt_ko_shm <- fitTPT(   anndata_file = \"hong_sampled_bcells_assay-RNA_IL23--.h5ad\",   CellrankObj = g_ko_shm, group.cells.by = \"isotype\",   source_state = 'M', target_state = 'A' ) tpt_wt_shm <- fitTPT(   anndata_file = \"hong_sampled_bcells_assay-RNA_WT.h5ad\",   CellrankObj = g_wt_shm, group.cells.by = \"isotype\",   source_state = 'M', target_state = 'A' )"},{"path":"https://http://josephng-bio.org/sciCSR/articles/csr.html","id":"visualisation","dir":"Articles","previous_headings":"Inferring transitions using CSR and SHM information","what":"Visualisation","title":"Analysing Class-Switch Recombination in B cell scRNA-seq data using sciCSR","text":"can now visualise inferences - firstly, function plotStationaryDistribution display bar plot known ‘stationary distribution’ TPT - inferred distribution states assuming dynamics system reached equilibrium. case analysing CSR, think isotype distribution population cells steady state, inferred given data.  two plots rendered separately vertical axes conform scale. pass return_plot = FALSE call plotStationaryDistribution, data frame underlying bar plots returned, can plot data plot (, e.g. representing different conditions colours) upon manipulation, e.g.:  Another way visualise inference visualise inferred flux matrix , .e. compare amount transitions involving pair isotypes. function plotFluxMatrix provides visualisation:  can also combine plot one. Similar pass return_plot = FALSE function call. generate column stores difference flux WT knockout conditions. scale bubble sizes stationary distribution knockout condition, reflect quantity interest (primarily interested happens knockouts) prominently plot:  can reproduce main finding Hong et al. paper Il23 knockout conditions deplete switching IgG2b. example performed analysis sampled data (put datasets large package!) whilst fluxes plot might different use entire dataset, encouraging major result involving IgG2b still comes prominent visualisation. Finally, can generate visualisation SHM-based inference. code , performed inference transition matrix using SHM information, TPT still group cells isotypes infer fluxes isotypes. Since theory CSR SHM B cell maturation processes, expect inference two different sources information capture similar transitions.   Congratulations, now gone major functionalities sciCSR. sciCSR offers capabilities compare inference results based CSR, SHM RNA velocity. interested, please check vignette worked-example sciCSR can help type analysis.","code":"# Plot the WT and knockout separately as two plots # plotStationaryDistribution refers a ggplot2 object # we use the plot_grid() function in the cowplot package # to arrange the two plots side by side  library(cowplot) library(ggplot2) plot_grid(   plotStationaryDistribution(tpt_wt_csr, SeuratObj = hong_b) +      ggtitle(\"WT\"),   plotStationaryDistribution(tpt_ko_csr, SeuratObj = hong_b) +      ggtitle(\"Il23 knockout\"),   nrow = 1, align = \"h\", axis = \"tb\" ) stationary_distribution <- list(   \"WT\" = plotStationaryDistribution(tpt_wt_csr, SeuratObj = hong_b,                                     return_plot = FALSE),   \"KD\" = plotStationaryDistribution(tpt_ko_csr, SeuratObj = hong_b,                                     return_plot = FALSE) ) # add a column to indicate WT/KD for each data frame stationary_distribution[[1]]$status <- \"WT\" stationary_distribution[[2]]$status <- \"Il23 knockout\"  # row-bind the two data frames stationary_distribution <- rbind(stationary_distribution[[1]],                                  stationary_distribution[[2]]) stationary_distribution$status <- factor(stationary_distribution$status,                                          levels = c(\"WT\", \"Il23 knockout\")) # use ggplot2 to plot a bargraph with colour reflecting WT/knockout ggplot(stationary_distribution,        aes(x = isotype, y = stationary, fill = status,             ymin = lowq, ymax = highq)) +     geom_bar(position = position_dodge(), stat = \"identity\") +      geom_errorbar(width = 0, position = position_dodge(width = 0.9)) +     ylab(\"stationary distribution\") + xlab(\"isotype\") +     cowplot::theme_cowplot() # Once again we use the plot_grid() function in the cowplot package # to arrange the two plots side by side plot_grid(   plotFluxMatrix(tpt_wt_csr, SeuratObj = hong_b) +      ggtitle(\"WT\"),   plotFluxMatrix(tpt_ko_csr, SeuratObj = hong_b) +      ggtitle(\"Il23 knockout\"),   nrow = 1, align = \"h\", axis = \"tb\" ) #show flux difference instead fluxes <- list(   plotFluxMatrix(tpt_wt_csr, SeuratObj = hong_b, return_plot = FALSE),   plotFluxMatrix(tpt_ko_csr, SeuratObj = hong_b, return_plot = FALSE) ) # merge the two data frames together so that the flux/p-value from WT/KD # are in separate columns on the same line fluxes <- merge(fluxes[[1]], fluxes[[2]], by = c(\"from\", \"to\"),                  all = TRUE, sort = FALSE, suffixes = c(\"_WT\", \"_KO\")) # flux difference: KO minus WT fluxes$flux_diff <- fluxes$flux_KO - fluxes$flux_WT  fluxes <- merge(fluxes,                  data.frame(tpt_ko_csr$stationary_distribution),                  by.x = \"to\", by.y = \"row.names\")  ggplot(fluxes[which(!is.na(fluxes$flux_diff)), ],         aes_string(x = \"from\", y = \"to\", color = \"flux_diff\",                    size = \"tpt_ko_csr.stationary_distribution\")) +   geom_point() + cowplot::theme_cowplot() +    scale_color_gradient2(name = \"flux_KO -\\nflux_WT\", limits = c(-5, 5),                          high = \"blue\", low = \"red\", na.value = \"blue\") +   scale_size_continuous(name = \"\", guide=FALSE) +   scale_x_discrete(drop = FALSE, position = \"top\") +    scale_y_discrete(drop = FALSE) ## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please ## use `guide = \"none\"` instead. stationary_distribution_shm <- list(   \"WT\" = plotStationaryDistribution(tpt_wt_shm, SeuratObj = hong_b,                                     return_plot = FALSE),   \"KD\" = plotStationaryDistribution(tpt_ko_shm, SeuratObj = hong_b,                                     return_plot = FALSE) ) # add a column to indicate WT/KD for each data frame stationary_distribution_shm[[1]]$status <- \"WT\" stationary_distribution_shm[[2]]$status <- \"Il23 knockout\"  # row-bind the two data frames stationary_distribution_shm <- rbind(stationary_distribution_shm[[1]],                                      stationary_distribution_shm[[2]]) stationary_distribution_shm$status <- factor(   stationary_distribution_shm$status,   levels = c(\"WT\", \"Il23 knockout\") ) # use ggplot2 to plot a bargraph with colour reflecting WT/knockout ggplot(stationary_distribution_shm,        aes(x = isotype, y = stationary, fill = status,             ymin = lowq, ymax = highq)) +     geom_bar(position = position_dodge(), stat = \"identity\") +      geom_errorbar(width = 0, position = position_dodge(width = 0.9)) +     ylab(\"stationary distribution\") + xlab(\"isotype\") +     ggtitle(\"Inference using SHM information\") +     cowplot::theme_cowplot() fluxes_shm <- list(   plotFluxMatrix(tpt_wt_shm, SeuratObj = hong_b, return_plot = FALSE),   plotFluxMatrix(tpt_ko_shm, SeuratObj = hong_b, return_plot = FALSE) ) # merge the two data frames together so that the flux/p-value from WT/KD # are in separate columns on the same line fluxes_shm <- merge(fluxes_shm[[1]], fluxes_shm[[2]], by = c(\"from\", \"to\"),                      all = TRUE, sort = FALSE, suffixes = c(\"_WT\", \"_KO\")) # flux difference: KO minus WT fluxes_shm$flux_diff <- fluxes_shm$flux_KO - fluxes_shm$flux_WT  fluxes_shm <- merge(fluxes_shm,                      data.frame(tpt_ko_shm$stationary_distribution),                      by.x = \"to\", by.y = \"row.names\")  ggplot(fluxes_shm[which(!is.na(fluxes_shm$flux_diff)), ],         aes_string(x = \"from\", y = \"to\", color = \"flux_diff\",                    size = \"tpt_ko_shm.stationary_distribution\")) +   geom_point() + cowplot::theme_cowplot() +    scale_color_gradient2(name = \"flux_KO -\\nflux_WT\", limits = c(-5, 5),                          high = \"blue\", low = \"red\", na.value = \"blue\") +   scale_size_continuous(name = \"\", guide=FALSE) +   scale_x_discrete(drop = FALSE, position = \"top\") +    scale_y_discrete(drop = FALSE) ## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please ## use `guide = \"none\"` instead."},{"path":"https://http://josephng-bio.org/sciCSR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Ng. Author, maintainer.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ng et al. sciCSR infers B cell state transition predicts class-switch recombination dynamics using single-cell transcriptomic data. Manuscript preparation (2023)","code":"@Article{,   author = {Joseph CF Ng and Guillem Montamat Garcia and Alexander T Stewart and Paul Blair and Deborah K Dunn-Walters and Claudia Mauri and Franca Fraternali},   title = {sciCSR infers B cell state transition and predicts class-switch recombination dynamics using single-cell transcriptomic data},   year = {2023},   journal = {Manuscript in preparation}, }"},{"path":[]},{"path":"https://http://josephng-bio.org/sciCSR/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Single-cell Inference of Class Switch Recombination","text":"sciCSR R package designed analyse class-switch recombination (CSR) B cell single-cell RNA sequencing (scRNA-seq) data. CSR major process B cell maturation whereby B cell changes constant region (“isotype”) B cell receptor (BCR) order adapt function different tissue biological contexts. Along somatic hypermutation (SHM) mutations accumulated variable regions BCR, CSR hallmark transitions B cells naive state acquire memory antigens. sciCSR provides routines extract information CSR SHM scRNA-seq data , available, scBCR-seq (.e. single-cell BCR repertoire profiling) data. theory CSR SHM information can used alternatives popular RNA velocity method infer transitions B cells. sciCSR takes forward extracted CSR/SHM information inputs CellRank method infer transitions B cells; can used directly analyse patterns B cell maturation data, considering evidence CSR SHM, native B cell biology, addressing limitations RNA velocity analysing scRNA-seq datasets mature cell types B cells found circulation secondary lymphoid organs.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Single-cell Inference of Class Switch Recombination","text":"Note: installation use sciCSR package tested Linux, MacOS Windows machines. said, may still uncatched issues installation /usage - please log issue github look . installation sciCSR package takes around 30 seconds modern standard Windows laptop. sciCSR requires python packages installed (scanpy, scvelo, cellrank etc.) functionalities depend python packages. recommend setting conda environment dependencies sciCSR exclusively calls packages environment; avoid problems messing local installation python () previously set packages uses. don’t need externally set - first time run examples/analyses sciCSR, just run following lines R finishing sciCSR installation: set environment named ‘scicsr’ desired dependencies ready analysis. code detect existing Anaconda/Miniconda installation uses set environment; , install Miniconda R default location set conda environment. function takes around 5 minutes 30 seconds set python dependencies modern standard Windows laptop.","code":"# install dependencies and sciCSR itself (requires 'devtools') if (!require('devtools')){   install.packages('devtools') } devtools::install_github(   c(\"immunogenomics/harmony\", \"mojaveazure/seurat-disk\", \"Fraternalilab/sciCSR\") ) library(sciCSR) prepare_sciCSR()"},{"path":"https://http://josephng-bio.org/sciCSR/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Single-cell Inference of Class Switch Recombination","text":"Please consult following vignettes: Basic sciCSR usage - Analysing CSR: vignette analyses subset data Hong et al. J Immunol 2020 analysing splenic B cells Il23 knockout biases B cells away switches towards IgG2b isotype. standard sciCSR tutorial contains necessary code examples run analysis. took 4 minutes 30 seconds 5 minutes run functions listed R notebook compile output shown notebook. Comparing cell state transitions inferred using RNA velocity, CSR SHM: vignette showcases use CSR SHM information infer B cell state transitions, compares RNA velocity. subset tonsillar B cell scRNA-seq data King et al. Sci Immunol 2021 used example.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/AddCellMetaToVDJ.html","id":null,"dir":"Reference","previous_headings":"","what":"Add cell metadata from Seurat object into VDJ data frame — AddCellMetaToVDJ","title":"Add cell metadata from Seurat object into VDJ data frame — AddCellMetaToVDJ","text":"AddCellMetaToVDJ merges annotations Seurat object (e.g. cluster annotations) VDJ repertoire data frame.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/AddCellMetaToVDJ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add cell metadata from Seurat object into VDJ data frame — AddCellMetaToVDJ","text":"","code":"AddCellMetaToVDJ(vdj, SeuratObj, metadata_col, barcode_col = \"row.names\")"},{"path":"https://http://josephng-bio.org/sciCSR/reference/AddCellMetaToVDJ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add cell metadata from Seurat object into VDJ data frame — AddCellMetaToVDJ","text":"vdj data.frame VDJ data running collapseBCR. SeuratObj Seurat object. metadata_col vector column names SeuratObj denoting desired metadata extracted added vdj barcode_col column name SeuratObj metadata holds cell barcodes. (Default: 'row.names' .e. use row names SeruatObj metadata cell barcodes)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/AddCellMetaToVDJ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add cell metadata from Seurat object into VDJ data frame — AddCellMetaToVDJ","text":"VDJ data frame additional columns taken Seurat object metadata slot.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/AddCellMetaToVDJ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add cell metadata from Seurat object into VDJ data frame — AddCellMetaToVDJ","text":"function accepts columns found metadata slot Seurat object. need indicate column whether data","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/annotatePairing.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate heavy-light chain pairing — annotatePairing","title":"Annotate heavy-light chain pairing — annotatePairing","text":"annotatePairing checks repertoire table annotate heavy-light chain pairing. function classifies given cell (.e. given cell barcode) whether singlet/doublet etc. based number heavy (H) light (L) chain sequences observed data","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/annotatePairing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate heavy-light chain pairing — annotatePairing","text":"","code":"annotatePairing(tb_list, c_gene_column = \"c_gene\")"},{"path":"https://http://josephng-bio.org/sciCSR/reference/annotatePairing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate heavy-light chain pairing — annotatePairing","text":"tb_list list data.frame holding VDJ data. element corresponds subset sequences bearing one specific cell barcode c_gene_column Column name indicating isotype/light chain type information stored data.frames tb_list.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/annotatePairing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate heavy-light chain pairing — annotatePairing","text":"one 'singlet', 'BCR_doublet', 'multi_LC_same_class', 'multi_LC_diff_class' 'multi_HC', according rules stated 'Details' section.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/annotatePairing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate heavy-light chain pairing — annotatePairing","text":"function assumes input sequences belonging cell (.e. bearing cell barcode). Based number heavy light chain sequences associated given cell barcode classified one following categories: BCR_doublets 1 H 1 L per cell barcode multi_LC_diff_class Exactly 1 H 1 L per cell barcode, kappa lambda light chains found multi_LC_same_class Exactly 1 H 1 L per cell barcode, light chains either kappa lambda multi_HC 1 H exacly 1 L per cell barcode singlet Exactly 1 H /exactly 1 L per cell barcode","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/collapseBCR.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse the VDJ repertoire data frames by cell barcode — collapseBCR","title":"Collapse the VDJ repertoire data frames by cell barcode — collapseBCR","text":"collapseBCR considers input data frame scBCR-seq contig annotations collapses data frame cell 1 heavy chain 1 ligh chain retained representative, order merge data Seurat object holding scRNA-seq data data organised per-cell level.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/collapseBCR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse the VDJ repertoire data frames by cell barcode — collapseBCR","text":"","code":"collapseBCR(tb, format = \"10X\", full.table = FALSE)"},{"path":"https://http://josephng-bio.org/sciCSR/reference/collapseBCR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse the VDJ repertoire data frames by cell barcode — collapseBCR","text":"tb single data.frame holding VDJ data 1 library format data format. Default = '10X'. moment '10X' supported. full.table TRUE, return list two elements (1) collapsed data max 1H 1L per cell, (2) full table (Default: FALSE)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/collapseBCR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse the VDJ repertoire data frames by cell barcode — collapseBCR","text":"full.table FALSE, input data frame cell 1 heavy chain 1 light chain retained representative. Otherwise, list 2 data frames, one collapsed version one full version. additional column 'bcr_type' added data frame indicating whether cell barcode singlet/doublet etc. based number observed heavy/light chains. (see ?annotatePairing())","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/collapseBCR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse the VDJ repertoire data frames by cell barcode — collapseBCR","text":"function cleans barcode table potential doublets /cells 1 heavy/light chain sequences dealt prior merging scRNA-seq data form Seurat objects avoid problems merging owing one--many mapping cell barcode sequences. frequently observed contig taken representative.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/collapseIntoMetagenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Group gene counts into metagenes to minimise individual differences — collapseIntoMetagenes","title":"Group gene counts into metagenes to minimise individual differences — collapseIntoMetagenes","text":"collapseIntoMetagenes defines metagenes sum gene counts mapped group genes, single-cell gene expression count matrix.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/collapseIntoMetagenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group gene counts into metagenes to minimise individual differences — collapseIntoMetagenes","text":"","code":"collapseIntoMetagenes(   countmat,   metagenes_definitions = c(RIBO = \"^RP[LS]|^MRP[LS]\", `HLA-Imaj` = \"^HLA-[ABC]$\",     `HLA-Imin` = \"^HLA-[EFG]$\", `HLA-II` = \"^HLA-D\", VDJ = \"^IG[HKL][VDJ][0-9]\") )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/collapseIntoMetagenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group gene counts into metagenes to minimise individual differences — collapseIntoMetagenes","text":"countmat sparse matrix containing single-cell gene expression data. Output Seurat::Read10X equivalent. metagenes_definitions vector containing regular expressions match gene names row names countmat. regular expression, matched genes summarised one metagene (see Details). (Default: individual metagenes ribosomal, HLA -major, HLA -minor, HLA II Ig VDJ transcripts.)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/collapseIntoMetagenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group gene counts into metagenes to minimise individual differences — collapseIntoMetagenes","text":"sparse matrix containing count data matched genes collapsed metagenes names given names element metagenes_definitions.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/collapseIntoMetagenes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Group gene counts into metagenes to minimise individual differences — collapseIntoMetagenes","text":"collapseIntoMetagenes can used group transcript counts metagenes, remove effect e.g. individual variations leads preference specific genes. One example immunoglobulin VDJ genes whose expression specific B cell indicative clonotype rather cell state. summing individual VDJ genes one metagene, avoids individual genes influence downstream dimensionality projection clustering results.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/combineBCR.html","id":null,"dir":"Reference","previous_headings":"","what":"Add annotations from VDJ data frame into the Seurat object — combineBCR","title":"Add annotations from VDJ data frame into the Seurat object — combineBCR","text":"combineBCR merges annotations data frames holding repertoire data metadata Seurat object.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/combineBCR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add annotations from VDJ data frame into the Seurat object — combineBCR","text":"","code":"combineBCR(   vdj,   SeuratObj,   keep_columns = c(\"v_gene\", \"d_gene\", \"j_gene\", \"c_gene\", \"full_length\", \"productive\",     \"cdr3\", \"cdr3_nt\", \"reads\", \"umis\"),   seurat_sample_column = NULL,   seurat_cell_name_column = NULL )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/combineBCR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add annotations from VDJ data frame into the Seurat object — combineBCR","text":"vdj data.frame VDJ data running collapseBCR. SeuratObj Seurat object. keep_columns vector column names vdj kept added metadata slot Seurat object. default following informations included: VDJ gene usage, isotype, CDR3 sequence, well binary indications full-length/productive. seurat_sample_column (Optional) Column name SeuratObj metadata sample name/ID information stored. Used barcode column vdj data frame match cell names Seurat object given Cells(SeuratObj). seurat_cell_name_column (Optional) Column name SeuratObj metadata cell barcodes stored. Used barcode column vdj data frame match cell names Seurat object given Cells(SeuratObj).","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/combineBCR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add annotations from VDJ data frame into the Seurat object — combineBCR","text":"Seurat object VDJ annotations added metadata slot.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/combineBCR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add annotations from VDJ data frame into the Seurat object — combineBCR","text":"function first reorganises VDJ data frame one line represent 1 cell. selects columns data frame add metadata given Seurat object.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/combineLoomFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine velocyto loom files on multiple BAM files into one loom file — combineLoomFiles","title":"Combine velocyto loom files on multiple BAM files into one loom file — combineLoomFiles","text":"combineLoomFiles combines .loom files generated using velocyto, multiple BAM files, one loom file cell barcodes fixed reflect cell names given Seurat object.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/combineLoomFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine velocyto loom files on multiple BAM files into one loom file — combineLoomFiles","text":"","code":"combineLoomFiles(   loom_files,   new_loom_filename,   SeuratObj,   sample_names,   seurat_sample_column = \"sample_id\" )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/combineLoomFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine velocyto loom files on multiple BAM files into one loom file — combineLoomFiles","text":"loom_files vector loom files merged new_loom_filename, character, name new loom file written containing merged data SeuratObj corresponding Seurat Object sample_names vector sample names looked seurat_sample_column column Seurat metadata. Assumed order order given loom_files. seurat_sample_column column name Seurat metadata different values given sample_names can found","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/combineLoomFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine velocyto loom files on multiple BAM files into one loom file — combineLoomFiles","text":"output message indicating success writing merged loom matrices file given new_loom_file.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/combineLoomFiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine velocyto loom files on multiple BAM files into one loom file — combineLoomFiles","text":"combineLoomFiles take vector sample_names (assumed length order loom_files), parse prefix suffix added cell barcodes belonging given sample, modify column names matrices loom files accordingly. allows combining matrices coming different samples without ambiguity cell barcodes. checks matrices overlap genes given Seurat Object, remove duplicated genes, finally write merged loom matrices new loom file, used RNA velocity analysis.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/compareTransitionMatrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing distances between multiple transition matrices — compareTransitionMatrices","title":"Computing distances between multiple transition matrices — compareTransitionMatrices","text":"compareTransitionMatrices computes distances list transition matrices.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/compareTransitionMatrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing distances between multiple transition matrices — compareTransitionMatrices","text":"","code":"compareTransitionMatrices(   matrix_list,   SeuratObj,   cells,   group.by = \"seurat_clusters\",   n_realisation = 1000,   n_step = 1000,   distance_metric = \"KL\" )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/compareTransitionMatrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing distances between multiple transition matrices — compareTransitionMatrices","text":"matrix_list list transition matrices compared. SeuratObj Seurat object. Considered csr_transitions NULL. cells vector cell identifiers corresponding row/column order transition matrices. (Assumed supplied transition matrices exactly row/column ordering.) group.column Seurat object metadata cells grouped. (Default: 'seurat_clusters') n_realisation number trajectories ('realisations') sampled Markov model defined using transition matrix. (Default: 1000) n_step number time-steps trajectory/realisation sampled. (Default: 1000) distance_metric distance metric calculated. Either \"KL\" (Kullback-Leibler divergence) \"JSD\" (Jensen-Shannon divergence). (Default: \"KL\")","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/compareTransitionMatrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing distances between multiple transition matrices — compareTransitionMatrices","text":"list two entries: distance distance (distance_metric) trajectories sampled possible pair transition matrix. sampled_transitions list trajectories sampled transition matrices.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/compareTransitionMatrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computing distances between multiple transition matrices — compareTransitionMatrices","text":"compareTransitionMatrices takes list transition matrices given matrix_list, sample realisations Markov chain defined using transition matrix. compares similarity sampled trajectories using either Kullback-Leibler divergence (distance_metric == \"KL\") Jensen-Shannon divergence (distance_metric == \"JSD\"). can interpreted way (larger number, different two transition matrices realisations ), although Jensen-Shannon divergence scaled 0 1.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/convertSeuratToH5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper function to convert Seurat Object to a AnnData .h5ad file — convertSeuratToH5ad","title":"wrapper function to convert Seurat Object to a AnnData .h5ad file — convertSeuratToH5ad","text":"convertSeuratToH5ad wrapper function convert given Seurat Object AnnData object (use python e.g. scanpy) write .h5ad file.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/convertSeuratToH5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper function to convert Seurat Object to a AnnData .h5ad file — convertSeuratToH5ad","text":"","code":"convertSeuratToH5ad(SeuratObj, assays, h5ad_filename, conda_env = \"scicsr\")"},{"path":"https://http://josephng-bio.org/sciCSR/reference/convertSeuratToH5ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper function to convert Seurat Object to a AnnData .h5ad file — convertSeuratToH5ad","text":"SeuratObj Seurat Object assays vector assay names SeuratObj exported h5ad_filename Filename output .h5ad file. Note final output filenames assay names appended (see examples). conda_env character, NULL named conda environment used. (Default: 'scicsr'). NULL, conda environment used, program assumes python packages scanpy scvelo installed local python)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/convertSeuratToH5ad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper function to convert Seurat Object to a AnnData .h5ad file — convertSeuratToH5ad","text":"vector .h5ad filenames outputted. file correspond one Seurat assay, indicated suffix inside filename (see examples).","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/convertSeuratToH5ad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"wrapper function to convert Seurat Object to a AnnData .h5ad file — convertSeuratToH5ad","text":"convertSeuratToH5ad simply wraps around R SeuratDisk package perform stated conversion. Included ease use user. assay Seurat Object written separate .h5ad files.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/fitTPT.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Transition Path Theory (TPT) on the cellrank transition models — fitTPT","title":"Fit Transition Path Theory (TPT) on the cellrank transition models — fitTPT","text":"fitTPT fits Transition Path Theory transition model defined using fitTransitionModel(), 'coarse-grained' level transitions considered *groups* cells grouping indicated user.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/fitTPT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Transition Path Theory (TPT) on the cellrank transition models — fitTPT","text":"","code":"fitTPT(   anndata_file,   CellrankObj,   group.cells.by,   source_state,   target_state,   conda_env = \"scicsr\",   random_n = 100,   do_pca = TRUE,   do_neighbors = TRUE )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/fitTPT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Transition Path Theory (TPT) on the cellrank transition models — fitTPT","text":"anndata_file filename pointing AnnData file. CellrankObj cellrank_obj entry output list fitTransitionModel(). group.cells.character, column metadata group cells source_state character, value group.cells.column taken source state fitting transition path theory. cells belonging group considered source. target_state character, value group.cells.column taken target state fitting transition path theory. cells belonging group considered target. conda_env character, NULL named conda environment used perform TPT analysis. (Default: NULL, .e. conda environment used, program assumes python packages scanpy, scvelo cellrank installed local python) random_n number times reshuffle transition matrix columns derive randomised models (default: 100). do_pca principal component analysis (PCA) re-computed data? (Default: TRUE) do_neighbors k-nearest neighbour (kNN) graph re-computed data? (Default: TRUE)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/fitTPT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Transition Path Theory (TPT) on the cellrank transition models — fitTPT","text":"list entries: gross_flux n--n matrix (n total number states), total fluxes estimated state (row) another state (column). pathways data.frame indicating possible paths take source_state target_state, likelihood (max: 100) travel stated path. significance n--n matrix (n total number states), observed gross flux greater flux estimated randomised models. total_gross_flux element-wise sum gross_flux matrix. total_gross_flux_reshuffled element-wise sum gross_flux matrix, calculated randomised (randomly reshuffled transition matrix coluns) models. gross_flux_randomised gross_flux matrix randomised (randomly reshuffled transition matrix coluns) TPT models. mfpt Mean First Passage Time required travel source_state target_state estimated Transition Path Theory. mfpt_reshuffled Mean First Passage Time required travel source_state target_state estimated Transition Path Theory, calculated randomised (randomly reshuffled transition matrix coluns) models. stationary_distribution Equilibrium probability state estimated Transition Path Theory. stationary_distribution_reshuffled Equilibrium probability state estimated Transition Path Theory, calculated randomised (randomly reshuffled transition matrix coluns) models.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/fitTPT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Transition Path Theory (TPT) on the cellrank transition models — fitTPT","text":"fitTPT interfaces (reimplements routines improve efficincy) Python deeptime package fit transition path theory (TPT) onto markov state model defined running fitTransitionModel function uses cellrank hood. parameter group.cells., user specifies scheme group individual row/columns transition matrix (example, cell type isotype). function fits TPT grouped/'coarse-grained' transition matrix, upon user indicating likely 'source' 'target' state. output estimated information flows ('flux') different states order flow source target, probabilities sampling state equilibrium ('stationary distribution'). random 'null background' model fitted randomly reshuffling columns transition matrix random_n (default: 100) times. random fluxes help determine significance observed flux, calculating one-sided empirical probabilities observed flux larger observed randomised models.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/fitTransitionModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit transition model on data using the python cellrank package — fitTransitionModel","title":"Fit transition model on data using the python cellrank package — fitTransitionModel","text":"fitTransitionModel fits transition models data using python cellrank package.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/fitTransitionModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit transition model on data using the python cellrank package — fitTransitionModel","text":"","code":"fitTransitionModel(   anndata_file,   conda_env = \"scicsr\",   mode = \"pseudotime\",   pseudotime_key = \"csr_pot\",   do_pca = TRUE,   do_neighbors = TRUE )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/fitTransitionModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit transition model on data using the python cellrank package — fitTransitionModel","text":"anndata_file filename pointing AnnData file. conda_env character, NULL named conda environment used run CellRank. (Default: NULL, .e. conda environment used, program assumes python packages scanpy, scvelo cellrank installed local python) mode character, either 'pseudotime' (uses cellrank 'PseudotimeKernel') 'velocity' (cellrank 'VelocityKernel'). (Default: 'pseudotime') pseudotime_key character, column name indicates ranking used pseudotime ordering cells. considered mode 'velocity'. (Default: 'csr_pot') do_pca principal component analysis (PCA) re-computed data? (Default: TRUE) do_neighbors k-nearest neighbour (kNN) graph re-computed data? (Default: TRUE)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/fitTransitionModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit transition model on data using the python cellrank package — fitTransitionModel","text":"list three entries: cellrank_obj Python cellrank.tl.estimators.CFLARE object containing details fitted transition model transition_matrix matrix holding cell--cell transition probability (.e. cellrank_obj.transition_matrix), converted dense matrix. single-cell transition matrix downstream uses. CellID vector cell identifiers order row/column transition_matrix.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/fitTransitionModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit transition model on data using the python cellrank package — fitTransitionModel","text":"fitTransitionModel currently implements either velocity kernel cellrank (.e. uses RNA velocity information fit transition probabilities) pseudotime kernel; user-indicated column metadata used pseudotime reference fit transition probabiltiies. **NOTE:** cases warning 'Biased KNN graph disconnected' subsequently cause fitTPT() function pipeline falied error, experience likely caused subsetting data prior computing transitions. Try setting do_pca = FALSE preserve original PCA avoid error.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getCSRpotential.html","id":null,"dir":"Reference","previous_headings":"","what":"score cells by their Class Switch Recombination (CSR) status — getCSRpotential","title":"score cells by their Class Switch Recombination (CSR) status — getCSRpotential","text":"getCSRpotential scores cell status temrs class switch recombination (CSR), considering mapped sterile productive IgH transcripts.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getCSRpotential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"score cells by their Class Switch Recombination (CSR) status — getCSRpotential","text":"","code":"getCSRpotential(   SeuratObj,   ighc_count_assay_name = \"IGHC\",   ighc_slot = \"scale.data\",   knn_graph = TRUE,   reference_based = NULL,   vars.to.regress = c(\"nCount_RNA\"),   mode = \"furthest\",   c_gene_anno_name = NULL,   isotype_column_to_add = \"isotype\" )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/getCSRpotential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"score cells by their Class Switch Recombination (CSR) status — getCSRpotential","text":"SeuratObj Seurat Object ighc_count_assay_name name assay SeuratObj holds IgH productive/sterile transcript count data. (Default: \"IGHC\") ighc_slot slot slot(SeuratObj, \"assays\")[[ighc_count_assay_name]] used access productive/sterile transcript counts (Default: \"scale_data\") knn_graph k-nearest neighbour graph calculated gene expression assay used impute annotation productive transcripts cells transcripts found across isotypes? TRUE, majority voting direct neighbours cell kNN graph used impute. Otherwise, cell assume express IgM productive transcript. Expects TRUE FALSE, igraph object containing kNN graph (case graph used majority voting imputation). (Default: TRUE) reference_based indicate species. function use naive isotype signature (sterile/productive gene counts) trained reference B cell atlas given species. now either 'human' 'mouse' accepted. NULL, function calculates CSR potential taking Euclidean norm (representative_p, total_s) (see Details). vars..regress list variables regressed scaling sterile/productive count matrix, ighc_slot given scale.data populated. (Default: \"nCount_RNA\", .e. per-cell library size) mode (applicable c_gene_anno_type NULL.) Interpretation isotype expressed cell. Either \"furthest\" (.e. isotype furthest along IGH locus non-zero expression productive transcript taken isotype representative cell) \"highest\" (isotype highest expression). (Default: \"furthest\") c_gene_anno_name NULL, column Seurat Object meta.data used indicate representative_p calculaing CSR potential score, lieu productive transcript counts IGHC assay (Default: NULL) isotype_column_to_add name column added SeuratObj meta.data indicate isotype cell. Used subsequent grouping cells calculating transitions.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getCSRpotential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"score cells by their Class Switch Recombination (CSR) status — getCSRpotential","text":"Seurat object following columns added meta.data slot: representative_p: integer indicating productive isotype cell (human: 0 = IgM, 1 = IgG3 ... ) total_s: amount sterile IgH molecules cell, calculated given ighc_slot IGHC assay. csr_pot: CSR potential. Depending argument reference_based method calculation different (see Details). isotype_column_to_add: isotype labelled M, G3, etc. (added c_gene_anno_name FALSE ighc_count_assay_name Assay used calculate CSR potential.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getCSRpotential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"score cells by their Class Switch Recombination (CSR) status — getCSRpotential","text":"getCSRpotential calculates \"CSR potential\" score ranks cells given Seurat Obj status CSR process. default calculate estimating contribution (weight) 'naive' isotype signature cell, given sterile/productive expression profile. CSR potential 1 - (Naive signature weight). method available either human mouse isotype signatures trained reference B cell atlas data. Alternatively, CSR potential can also calculated empirically (setting reference_based = NULL), given Euclidean norm (representative_p, total_s) (.e.\\( \\sqrt{ \\text{representative_p}^2 + \\text{total_s}^2} \\) ), representative_p: productive isotype cell (human 0 = IgM, 1 = IgG3 ... ), total_s: amount sterile IgH molecules cell. total_s, default use scale.data slot already normalises IGHC counts library size. exist function calculate regressing library size. representative_p, users can either use specified column Seurat object meta.data indicates isotype cell, , provided, used productive reads counted using productive/sterile quantification workflow implemented package (see argument mode function).","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getIGHmapping.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper function to scan sterile/productive IGH molecules from BAM file — getIGHmapping","title":"wrapper function to scan sterile/productive IGH molecules from BAM file — getIGHmapping","text":"getIGHmapping wrapper function intended users supply BAM file, scan sterile productive IGH transcripts C gene defined parameter IGHC_granges.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getIGHmapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper function to scan sterile/productive IGH molecules from BAM file — getIGHmapping","text":"","code":"getIGHmapping(   bam,   definitions,   cellBarcodeTag = \"CB\",   umiTag = \"UB\",   paired = FALSE,   flank = 5000 )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/getIGHmapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper function to scan sterile/productive IGH molecules from BAM file — getIGHmapping","text":"bam filepath BAM file read definitions list GenomicRanges::GRanges object, specifying genomic coordinates VDJ genes, C genes coding segments sterile C transcripts. See data objects 'human_definitions' 'mouse_definitions' sciCSR package formats. cellBarcodeTag Name tag holding information cell barcode. code expects extracts tag line BAM alignments. Set NULL NA information available BAM file. (Default: \"CB\") umiTag Name tag holding information molecule barcode. code expects extracts tag line BAM alignments. Set NULL NA information available BAM file. (Default: \"UB\") paired sequencing reads paired-end? (Default: FALSE) flank either (1) integer (indicating 5' distance CH exons) (2) GRanges object (indicating exact genomic positions) defining sterile IgH transcripts. Ignored positions sterile transcripts already included definitions.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getIGHmapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper function to scan sterile/productive IGH molecules from BAM file — getIGHmapping","text":"list two items: read_count data.frame wide format indicating cell barcodes UMI combination, number **reads** (Note: UMI!) covering VDJ, Coding region (C) 5' intronic region () IGH C gene. junction_reads data.frame spliced reads mapped cell barcodes & UMIs. Either genuine spliced productive IgH transcripts, strange molecules potentially worth detailed inspection.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getIGHmapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"wrapper function to scan sterile/productive IGH molecules from BAM file — getIGHmapping","text":"function reads two GenomicRanges::GRanges objects, one defining genomic coordinates IGHC genes another VDJ genes. scans BAM file reads covering regions, extracting mapped cell barcodes Unique Molecule identifier (UMI). Sterile reads defined covering intronic region upstream 5' end C gene coding region - default consider region (min(previous_C_CDS_end, -flank), 0), previous_C_CDS_end refers 3' end coding region previous C gene, flank integr, given user, indicates 'far' function looks 5' coding region sterile reads. information sterile transcripts begin, coordinatees can passed GRanges object parameter flank (see examples). Outputs data frame cell barcodes molecules mapped IGHC gene, classified sterile/productive/C-.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getIGHreadType.html","id":null,"dir":"Reference","previous_headings":"","what":"Deduce type of IGH reads — getIGHreadType","title":"Deduce type of IGH reads — getIGHreadType","text":"getIGHreadType deduces, molecule cell identified via scanBam, whether corresponds productive (labelled \"-P\") sterile (\"-S\") IGH molecule. third category (\"-C\") assigned insufficient information present distinguish \"-P\" \"-S\".","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getIGHreadType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deduce type of IGH reads — getIGHreadType","text":"","code":"getIGHreadType(tb)"},{"path":"https://http://josephng-bio.org/sciCSR/reference/getIGHreadType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deduce type of IGH reads — getIGHreadType","text":"tb data.frame, output scanBam.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getIGHreadType.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deduce type of IGH reads — getIGHreadType","text":"function loops cell barcode - molecule barcode combination looks evidence reads mapping following three regions: VDJ, C well 5' intron C. molecule assigned based criteria: Productive (-P) least one read mapping VDJ region least one read mapping C exonic region. NOTE: making distinction whether VDJ already spliced C exons RNA level. simply asking whether molecule can encode Ig protein V C regions. Sterile (-S) least one read mapping 5' intronic region C gene,  without reads mapping VDJ region. represent 'sterile'/'germline'  IgH transcripts primes class-switch recombination. third category (-C) assigned insufficient information available classify molecule '-P' '-S' groups.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getJunctionReads.html","id":null,"dir":"Reference","previous_headings":"","what":"extract reads covering splice junctions — getJunctionReads","title":"extract reads covering splice junctions — getJunctionReads","text":"getJunctionReads extract reads scanBam cover splice junctions.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getJunctionReads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract reads covering splice junctions — getJunctionReads","text":"","code":"getJunctionReads(read_info)"},{"path":"https://http://josephng-bio.org/sciCSR/reference/getJunctionReads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract reads covering splice junctions — getJunctionReads","text":"read_info output scanBam containing details aligned reads VDJ, C intronic regions.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getJunctionReads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract reads covering splice junctions — getJunctionReads","text":"data.frame containing details reads cover splice junctions: qname read ID FASTQ/BAM CB) cell barcode UB) Unique molecule identifier (UMI) type list mapped entities (VDJ/IGHC genes/intronic rgeions) found read.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getJunctionReads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"extract reads covering splice junctions — getJunctionReads","text":"getJunctionReads extract reads scanBam cover splice junctions. considers cover VDJ C exons/introns, strange cases cover multiple different IGHC genes.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getSHM.html","id":null,"dir":"Reference","previous_headings":"","what":"get somatic hypermutation level — getSHM","title":"get somatic hypermutation level — getSHM","text":"getSHM calculates somatic hypermutation (.e. 1 - (percentage identity germline VH gene)).","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getSHM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get somatic hypermutation level — getSHM","text":"","code":"getSHM(SeuratObj, v_identity_anno_name, shm_column_to_add = \"shm\")"},{"path":"https://http://josephng-bio.org/sciCSR/reference/getSHM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get somatic hypermutation level — getSHM","text":"SeuratObj Seurat Object v_identity_anno_name column name Seurat meta.data slot holds v_identity information considered. shm_column_to_add name column added Seurat meta.data slot holds SHM frequency calculated function","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getSHM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get somatic hypermutation level — getSHM","text":"Seurat object given SeuratObj, except new column name given shm_column_to_add appended SeuratObj meta.data slot reflects calculated SHM frequency.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/getSHM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get somatic hypermutation level — getSHM","text":"getSHM considers v_identity (.e.  mapped cell, calculate 1 - v_identity somatic hypermutation (SHM) level cell. finds v_identity information meta.data slot Seurat object. cells without mapped V sequence, impute SHM 0.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/guessBarcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"parse the substring inside a given cell identifier which corresponds to the nucleotide barcode — guessBarcodes","title":"parse the substring inside a given cell identifier which corresponds to the nucleotide barcode — guessBarcodes","text":"guessBarcodes parses given cell identifiers identify substring correspond nucleotide barcode included experiment.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/guessBarcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parse the substring inside a given cell identifier which corresponds to the nucleotide barcode — guessBarcodes","text":"","code":"guessBarcodes(cell_name, min_barcode_length = 6)"},{"path":"https://http://josephng-bio.org/sciCSR/reference/guessBarcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parse the substring inside a given cell identifier which corresponds to the nucleotide barcode — guessBarcodes","text":"cell_name character, cell identifier, typicall prefix /suffix (e.g. \"ACTGATGCAT-1\", \"SampleA_ATGAACCTATGG\") min_barcode_length minimum length nucleotide barcode (Default: 6)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/guessBarcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parse the substring inside a given cell identifier which corresponds to the nucleotide barcode — guessBarcodes","text":"vector input cell_name decomposed three entries: prefix prefix exists input cell_name (NA exist cell_name) cell_name actual nucleotide barcode suffix suffix exists input cell_name (NA exist cell_name)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/guessBarcodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"parse the substring inside a given cell identifier which corresponds to the nucleotide barcode — guessBarcodes","text":"Numeric / string prefices/suffices typically added cell identifiers avoid wrong mapping across samples; however often create issues trying merge data ** sample annotated using different workflows. function attempts resolve issues extracting nucleotide barcodes actually introduced experiment.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/human_definitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Genomic coordinates of human heavy-chain immunoglobulin V, D, J, C genes — human_definitions","title":"Genomic coordinates of human heavy-chain immunoglobulin V, D, J, C genes — human_definitions","text":"Downloaded Ensembl BioMart query GRCh38 reference genome. positions sterile C transcripts separately annotated. used enumerating productive sterile IgH transcripts given BAM files.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/human_definitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genomic coordinates of human heavy-chain immunoglobulin V, D, J, C genes — human_definitions","text":"","code":"human_definitions"},{"path":"https://http://josephng-bio.org/sciCSR/reference/human_definitions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Genomic coordinates of human heavy-chain immunoglobulin V, D, J, C genes — human_definitions","text":"list three GenomicRanges objects: VDJ GenomicRanges object containing genomic coordinates individual V, D J genes C GenomicRanges object containing genomic coordinates coding segment individual C genes sterile GenomicRanges object containing genomic coordinates sterile transcripts individual C genes","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/human_nmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Isotype sterile/productive signatures trained using human single-cell B cell atlas — human_nmf","title":"Isotype sterile/productive signatures trained using human single-cell B cell atlas — human_nmf","text":"breakdown sterile/productive IgH transcripts isotype 'signatures' using non-negative matrix factorization (NMF). object stores NMF weights sterile/productive IgH gene NMf signature.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/human_nmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isotype sterile/productive signatures trained using human single-cell B cell atlas — human_nmf","text":"","code":"human_nmf"},{"path":"https://http://josephng-bio.org/sciCSR/reference/human_nmf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Isotype sterile/productive signatures trained using human single-cell B cell atlas — human_nmf","text":"matrix 16 rows 2 columns, row corresponds IgH sterile/productive gene column weights isotype signatures.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/mergeVelocytoWithGEX.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine velocyto loom data with AnnData — mergeVelocytoWithGEX","title":"Combine velocyto loom data with AnnData — mergeVelocytoWithGEX","text":"mergeVelocytoWithGEX merges velocyto spliced/unspliced gene counts AnnData object holding single-cell gene expression data. preprocessing function calculating RNA velocity using python scVelo package workflow.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/mergeVelocytoWithGEX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine velocyto loom data with AnnData — mergeVelocytoWithGEX","text":"","code":"mergeVelocytoWithGEX(   anndata_file,   loom_file,   anndata_out_filename,   conda_env = \"scicsr\" )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/mergeVelocytoWithGEX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine velocyto loom data with AnnData — mergeVelocytoWithGEX","text":"anndata_file filename pointing AnnData file containing gene expression data. loom_file, character, name new loom file written containing merged data anndata_out_filename output filename merged AnnData object written containing velocyto data gene expression data. conda_env character, NULL named conda environment used perform merge. (Default: 'scicsr'). NULL, conda environment used, program assumes python packages scanpy scvelo installed local python)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/mergeVelocytoWithGEX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine velocyto loom data with AnnData — mergeVelocytoWithGEX","text":"output message indicating success writing merged AnnData object file given anndata_out_filename.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/mergeVelocytoWithGEX.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine velocyto loom data with AnnData — mergeVelocytoWithGEX","text":"mergeVelocytoWithGEX uses R reticulate package run python commands merge velocyto counts anndata object. assumed cell barcodes velocyto loom anndata object matches . Please consult guessBarcodes combineLoomFiles first ensure barcodes match .","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/mouse_definitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Genomic coordinates of mouse heavy-chain immunoglobulin V, D, J, C genes — mouse_definitions","title":"Genomic coordinates of mouse heavy-chain immunoglobulin V, D, J, C genes — mouse_definitions","text":"Downloaded Ensembl BioMart query mm10 reference genome. positions sterile C transcripts separately annotated. used enumerating productive sterile IgH transcripts given BAM files.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/mouse_definitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genomic coordinates of mouse heavy-chain immunoglobulin V, D, J, C genes — mouse_definitions","text":"","code":"mouse_definitions"},{"path":"https://http://josephng-bio.org/sciCSR/reference/mouse_definitions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Genomic coordinates of mouse heavy-chain immunoglobulin V, D, J, C genes — mouse_definitions","text":"list three GenomicRanges objects: VDJ GenomicRanges object containing genomic coordinates individual V, D J genes C GenomicRanges object containing genomic coordinates coding segment individual C genes sterile GenomicRanges object containing genomic coordinates sterile transcripts individual C genes","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/mouse_nmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Isotype sterile/productive signatures trained using mouse single-cell B cell atlas — mouse_nmf","title":"Isotype sterile/productive signatures trained using mouse single-cell B cell atlas — mouse_nmf","text":"breakdown sterile/productive IgH transcripts isotype 'signatures' using non-negative matrix factorization (NMF). object stores NMF weights sterile/productive IgH gene NMF signature.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/mouse_nmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isotype sterile/productive signatures trained using mouse single-cell B cell atlas — mouse_nmf","text":"","code":"mouse_nmf"},{"path":"https://http://josephng-bio.org/sciCSR/reference/mouse_nmf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Isotype sterile/productive signatures trained using mouse single-cell B cell atlas — mouse_nmf","text":"matrix 14 rows 2 columns, row corresponds IgH sterile/productive gene column weights isotype signatures.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/normalise_dimreduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalisation and dimensionality reduction of scRNAseq gene counts — normalise_dimreduce","title":"Normalisation and dimensionality reduction of scRNAseq gene counts — normalise_dimreduce","text":"normalise_dimreduce wrapper function around Seurat basic data processing workflow generate normalised gene count data, dimensionality reduction, derivation cell clusters.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/normalise_dimreduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalisation and dimensionality reduction of scRNAseq gene counts — normalise_dimreduce","text":"","code":"normalise_dimreduce(   obj,   var_explained_lim = 0.015,   run.harmony = FALSE,   harmony_vars = NULL,   SCT = FALSE,   mt.pattern = \"^MT-\",   mt.percent = 10,   features_exclude = c(\"^IGH[MDE]\", \"^IGHG[1-4]\", \"^IGHA[1-2]\", \"^IG[HKL][VDJ]\",     \"^IGKC\", \"^IGLC[1-7]\", \"^TR[ABGD][CV]\", \"^AC233755.1\", \"^IGLL\", \"^JCHAIN\"),   ... )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/normalise_dimreduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalisation and dimensionality reduction of scRNAseq gene counts — normalise_dimreduce","text":"obj Seurat object gene counts unnormalised. var_explained_lim numeric, minimum proportion variance explained cutoff principal component included dimensionality reduction clustering steps (default: 0.015, .e. 1.5%) run.harmony package Harmony used data? (Default: FALSE) harmony_vars vector parameters included regression step Harmony. Variations specific parameters removed Harmony run. SCT SCTransform pipeline used? follow standard Seurat normalisation workflow (NormalizeData, FindVariableFeatures, ScaleData) mt.pattern regular expression used identify mitochondrial transcripts (Default: ^MT-\", .e. gene names beginning \"MT-\") mt.percent cutoff mitochondrial transcript percentage, cells removed Seurat project part quality control (Default: 10, .e. cells 10% counts mapped mitochondrial transcripts removed Seurat object) features_exclude vector regular expressions select genes IGNORED dimensionality reduction clustering. default following features included list: IgH, K, L V/D/JC genes, TRA/TRB V/C genes, AC233755.1 (encodes V-gene-like product), IGLL, JCHAIN) ... Arguments passed various Seurat functions (SCTransform, NormalizeData, FindVariableFeatures, ScaleData, RunPCA, RunUMAP, FindNeighbors, FindClusters)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/normalise_dimreduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalisation and dimensionality reduction of scRNAseq gene counts — normalise_dimreduce","text":"Seurat object normalised gene count data, dimensionality reduction clustering done","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/normalise_dimreduce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalisation and dimensionality reduction of scRNAseq gene counts — normalise_dimreduce","text":"normalise_dimreduce wrapper function around major basic Seurat data processing workflow performs following steps: Calculation % mitochondrial transcripts (PercentageFeatureSet) subsetting remove beyond cutoff given mt.percent. Gene count normalisation, using either SCTransform NormalizeData Pruning variably expressed features. genes names matching vector regular expression given argument features_exclude removed list avoid influencing downstream dimensionality reduction clustering steps. particularly relevant avoiding clusters B cells grouped isotypes/VDJ expression. Principal component analysis (PCA) (Seurat::RunPCA function) Batch correction using Harmony: covariates given harmony_vars removed Harmony regression step. (Optional, run.harmony == TRUE) UMAP dimensionality reduction: Seurat::RunUMAP, retaining top principal components, explain least var_explained_lim variance. k-neighbor network (kNN) construction (Seurat::FindNeighbors) Define cell clusters based kNN graph (Seurat::FindClusters)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plotFluxMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise flux matrix describing class-switch recombination (CSR) transitions in data — plotFluxMatrix","title":"Visualise flux matrix describing class-switch recombination (CSR) transitions in data — plotFluxMatrix","text":"plotFluxMatrix parse data fitTPT() visualises estimated isotype-switching dynamics form flux matrix detailing amount switches isotype.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plotFluxMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise flux matrix describing class-switch recombination (CSR) transitions in data — plotFluxMatrix","text":"","code":"plotFluxMatrix(   TPTObj,   SeuratObj,   ighc_count_assay_name = \"IGHC\",   mask_improbable_csr = TRUE,   return_plot = TRUE )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/plotFluxMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise flux matrix describing class-switch recombination (CSR) transitions in data — plotFluxMatrix","text":"TPTObj List TPT results, output fitTPT function. SeuratObj Seurat object ighc_count_assay_name name assay SeuratObj holds IgH productive/sterile transcript counts. (Default: \"IGHC\") mask_improbable_csr isotype combinations represents improbable Class-switch recombination events (.e. switching back isotype 5' current one) removed visualisation? (Default: TRUE) return_plot CSR transition plot returned? FALSE, named list stationary_distribution flux returned contains data frames visualised plot. (Default: TRUE)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plotFluxMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise flux matrix describing class-switch recombination (CSR) transitions in data — plotFluxMatrix","text":"ggplot2 object showing flux matrix associated significance level form bubble plot. See 'Description' details.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plotFluxMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualise flux matrix describing class-switch recombination (CSR) transitions in data — plotFluxMatrix","text":"plotFluxMatrix parses data fitTPT() function visualises results Transition Path Theory (TPT) form bubble plot representing amount flux isotype. * bubble size scaled significance, .e. likelihood observed flux greater randomised flux estimates obtained reshuffling columns transition matrix. * bubble colour scaled magnitude, .e. amount flux estimated flow one isotype another isotype. * Improbable CSR combinations (.e. switching back isotype preceding current isotype) removed default. can turned indicating mask_improbable_csr = FALSE.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plotStationaryDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise stationary distribution of isotypes in the data — plotStationaryDistribution","title":"Visualise stationary distribution of isotypes in the data — plotStationaryDistribution","text":"plotStationaryDistribution parse data fitTPT() plot bar-plot isotypes given data. stationary distribution represents equilibrium distribution cells harbouring isotype, taking underlying isotype-switching dynamics consideration.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plotStationaryDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise stationary distribution of isotypes in the data — plotStationaryDistribution","text":"","code":"plotStationaryDistribution(   TPTObj,   SeuratObj,   ighc_count_assay_name = \"IGHC\",   return_plot = TRUE )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/plotStationaryDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise stationary distribution of isotypes in the data — plotStationaryDistribution","text":"TPTObj List TPT results, output fitTPT() function. SeuratObj Seurat object ighc_count_assay_name name assay SeuratObj holds IgH productive/sterile transcript counts. (Default: \"IGHC\") return_plot CSR transition plot returned? FALSE, named list stationary_distribution flux returned contains data frames visualised plot. (Default: TRUE)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plotStationaryDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise stationary distribution of isotypes in the data — plotStationaryDistribution","text":"ggplot2 object bar-plot stationary distribution 95","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plotStationaryDistribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualise stationary distribution of isotypes in the data — plotStationaryDistribution","text":"plotStationaryDistribution parses data fitTPT() function visualising stationary distribution isotypes. resulting plot bar plot stationary distribution, error-bars obtained bootstrapping (.e. sampling replacement) cells harbouring isotype. error-bar shown 95","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plot_arrows.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot arrows showing transitions in the style of RNA velocity plots — plot_arrows","title":"Plot arrows showing transitions in the style of RNA velocity plots — plot_arrows","text":"plot_arrows plots arrows top UMAP projection show transitions style conventional RNA velocity analysis. can indicate whether use RNA velocity (based_on = 'velocity'), CSR (based_on = 'CSR') SHM (based_on = 'SHM') information project arrows.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plot_arrows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot arrows showing transitions in the style of RNA velocity plots — plot_arrows","text":"","code":"plot_arrows(   anndata_file,   img_path = NULL,   based_on = \"velocity\",   style = \"grid\",   title = NULL,   colour.by = \"seurat_clusters\",   cols = NULL,   components = \"1,2\",   conda_env = \"scicsr\" )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/plot_arrows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot arrows showing transitions in the style of RNA velocity plots — plot_arrows","text":"anndata_file input anndata_file. based_on 'velocity', file needs output run_scVelo. based_on 'CSR' 'SHM', columns 'csr_pot' 'shm' .obs slot AnnData object. img_path Optional, path write arrow plot. supplied, can specify file format (PNG/SVG/PDF) including file extension. PNG, image 600 dots per inch rendered. Default NULL, .e. write temporary file PNG. based_on one 'velocity', 'csr', 'shm'. type information used project arrows. requirements input anndata_file (see argument anndata_file function). style one 'grid' (lay arrows grid fixed width/height UMAP plot) 'stream' (draw arrows streams), style scvelo 'pl.velocity_embedding_grid' 'pl.velocity_embedding_stream' respectively. title plot title (Default: NULL, title plot identical 'based_on') colour.column gene expression metadata group colour cells (Default: 'seurat_clusters') cols Optional, vector characters containing HEX code colours used. length number levels found colour.variable gene expression metadata. components component dimensionality reduction show plot. e.g. put \\'1,3\\' desired UMAP plot displays UMAP_1 UMAP_3 axes.(Default: '1,2') conda_env character, NULL named conda environment used generate plot scVelo. (Default: 'scicsr'). NULL, conda environment used, program assumes python packages scanpy scvelo installed local python)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plot_arrows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot arrows showing transitions in the style of RNA velocity plots — plot_arrows","text":"plot UMAP dimensionality reduction arrows projected top depicting inferred transitions. plot saved path given img_path. PNG, rendered 600 dots-per-inch (dpi).","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/plot_arrows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot arrows showing transitions in the style of RNA velocity plots — plot_arrows","text":"plot_arrows uses plotting functionalities scVelo python generate plot arrows indicating transitions, given type biological information (velocity/CSR/SHM). can choose projecting transitions arrows laid grid (style = 'grid') streams arrows (style = 'stream'). plot saved SVG/PDF/PNG (depending file extension given img_path, see ), re-rendered 'plot' panel R.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/prepare_sciCSR.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare conda environment — prepare_sciCSR","title":"Prepare conda environment — prepare_sciCSR","text":"prepare_sciCSR prepares conda environment python packages required run sciCSR. need run function , first time use sciCSR package.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/prepare_sciCSR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare conda environment — prepare_sciCSR","text":"","code":"prepare_sciCSR()"},{"path":"https://http://josephng-bio.org/sciCSR/reference/prepare_sciCSR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare conda environment — prepare_sciCSR","text":"prepare_sciCSR set conda environment. Anaconda/Miniconda set yet system, function attempt set Miniconda using reticulate::install_miniconda(). function automatically locate Anaconda/Miniconda system create conda environment containing dependencies python sciCSR uses functionalities.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/read_loom_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"read loom matrices — read_loom_matrices","title":"read loom matrices — read_loom_matrices","text":"reproduce read.loom.matrices velocyto.R avoid problems installing dependencies","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/read_loom_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read loom matrices — read_loom_matrices","text":"","code":"read_loom_matrices(file, engine = \"hdf5r\")"},{"path":"https://http://josephng-bio.org/sciCSR/reference/read_loom_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read loom matrices — read_loom_matrices","text":"file input loom file engine package read h5 file type ('hdf5r' supported now)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/repairBarcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Repairing cell barcodes in a list of data frames/matrices to match the Seurat object — repairBarcode","title":"Repairing cell barcodes in a list of data frames/matrices to match the Seurat object — repairBarcode","text":"repairBarcode considers cell barcodes Seurat object alters cell barcode given list data frames/matrices match Seurat object. facilitates merging data frames Seurat object additional metadata columns.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/repairBarcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repairing cell barcodes in a list of data frames/matrices to match the Seurat object — repairBarcode","text":"","code":"repairBarcode(   data_list,   SeuratObj,   sample_names,   seurat_sample_column = \"sample_id\" )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/repairBarcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repairing cell barcodes in a list of data frames/matrices to match the Seurat object — repairBarcode","text":"data_list list, element either class data.frame matrix. element holds data 1 library ('sample') SeuratObj Seurat object. sample_names vector sample names data. 'Sample' refers sequencing library. seurat_sample_column Column name SeuratObj metadata sample name/ID information stored.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/repairBarcode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repairing cell barcodes in a list of data frames/matrices to match the Seurat object — repairBarcode","text":"list data.frames/matrices cell barcodes repaired match barcodes Seurat object.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/repairBarcode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repairing cell barcodes in a list of data frames/matrices to match the Seurat object — repairBarcode","text":"function work either list data frames cell barcodes given column (either named 'barcode' 'CB'), list matrices cell barcodes assumed row names matrix. function first establishes mapping table samples (given seurat_sample_column Seurat object) sample-specific cell barcode prefix/suffix, repairs barcodes given VDJ data frame match Seurat object.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/run_scVelo.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate RNA velocity using the python scvelo workflow — run_scVelo","title":"Calculate RNA velocity using the python scvelo workflow — run_scVelo","text":"run_scVelo calculates RNA velocity using python scvelo package velocity models implements.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/run_scVelo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate RNA velocity using the python scvelo workflow — run_scVelo","text":"","code":"run_scVelo(   anndata_file,   anndata_out_filename,   conda_env = \"scicsr\",   scvelo_mode = \"dynamical\",   reduction = \"UMAP\",   min_shared_counts = 20,   n_top_genes = 2000 )"},{"path":"https://http://josephng-bio.org/sciCSR/reference/run_scVelo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate RNA velocity using the python scvelo workflow — run_scVelo","text":"anndata_file filename pointing AnnData file containing gene expression data merged velocyto spliced/unspliced gene counts. anndata_out_filename output filename merged AnnData object written fitted RNA velocity estimates calculated using scvelo. conda_env character, NULL named conda environment used run scVelo. (Default: 'scicsr'). NULL, conda environment used, program assumes python packages scanpy scvelo installed local python) scvelo_mode 'mode' parameter python scvelo function scv.tl.velocity. (Default: \"dynamical\") reduction dimensionality reduction project RNA velocity estimates onto (Default: \"UMAP\") min_shared_counts include genes detected least number cells. (Default: 20) n_top_genes include many genes largest dispersion dataset (Default: 2000)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/run_scVelo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate RNA velocity using the python scvelo workflow — run_scVelo","text":"output message indicating success writing AnnData object merged scVelo results file given anndata_out_filename.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/run_scVelo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate RNA velocity using the python scvelo workflow — run_scVelo","text":"run_scVelo uses R reticulate package run python commands run scvelo RNA velocity calculations. follows [\"RNA Velocity Basics\"](https://scvelo.readthedocs.io/VelocityBasics/) tutorial scvelo documentation. Unfortunately due conflicts plotting functionalities R python function **** implement visualisation velocity stream onto dimensionality-reduced projection.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/scanBam.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan reads mapped to a given genomic range — scanBam","title":"Scan reads mapped to a given genomic range — scanBam","text":"scanBam looks reads BAM file mapped genomic range given parameter gRange.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/scanBam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan reads mapped to a given genomic range — scanBam","text":"","code":"scanBam(bam, gRange, cellBarcodeTag = \"CB\", umiTag = \"UB\", paired = FALSE)"},{"path":"https://http://josephng-bio.org/sciCSR/reference/scanBam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan reads mapped to a given genomic range — scanBam","text":"bam filepath BAM file read gRange GenomicRanges::GRanges object specifying genomic range scan. See Examples. cellBarcodeTag Name tag holding information cell barcode. code expects extracts tag line BAM alignments. Set NULL NA information available BAM file. (Default: \"CB\") umiTag Name tag holding information molecule barcode. code expects extracts tag line BAM alignments. Set NULL NA information available BAM file. (Default: \"UB\") paired sequencing reads paired-end? (Default: FALSE)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/scanBam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scan reads mapped to a given genomic range — scanBam","text":"data.frame: qname read ID FASTQ/BAM rname chromosome pos genomic position cigar CIGAR string indicating result aligning sequencing read nominated position genome. See SAM format specification document linked Description details flag FLAG field SAM file. Indication nature alignment. See SAM specification linked Description details. cellBarcodeTag (Default: \"CB\") cell barcode umiTag (Default: \"UB\") Unique molecule identifier (UMI) scanning BAM file default removes secondary alignments, duplicates reverse complement alignments.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/scanBam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scan reads mapped to a given genomic range — scanBam","text":"function looks BAM alignments mapped genomic range given parameter gRange. alignments *span across* gRange bases reside within range ignored (e.g. spliced read spans across given range bases map spliced range). function expects [standard BAM/SAM format specification](https://samtools.github.io/hts-specs/SAMv1.pdf) plus additional tags indicating associated cell molecule barcodes. Set cellBarcodeTag /umiTag NULL NA tags absent given BAM file.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/splitAnnData.html","id":null,"dir":"Reference","previous_headings":"","what":"Split AnnData object by levels in a specified meta data trait — splitAnnData","title":"Split AnnData object by levels in a specified meta data trait — splitAnnData","text":"splitAnnData splits AnnData object given metadata column write splitted data subsets separate .h5ad files.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/splitAnnData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split AnnData object by levels in a specified meta data trait — splitAnnData","text":"","code":"splitAnnData(anndata_file, split.by, levels, conda_env = \"scicsr\")"},{"path":"https://http://josephng-bio.org/sciCSR/reference/splitAnnData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split AnnData object by levels in a specified meta data trait — splitAnnData","text":"anndata_file filename pointing AnnData file. split.column name metadata (.e. SeuratObj@meta.data considering Seurat object, adata.obs considering AnnData object) indicating distinct levels split AnnData. levels vector values can found column given split.. Subsets Anndata value levels made written .h5ad files. conda_env character, NULL named conda environment used perform split. (Default: 'scicsr'). NULL, conda environment used, program assumes python packages scanpy scvelo installed local python)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/splitAnnData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split AnnData object by levels in a specified meta data trait — splitAnnData","text":"vector output .h5ad filenames indicated subset data (given filenames, see examples.)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/splitAnnData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split AnnData object by levels in a specified meta data trait — splitAnnData","text":"splitAnnData uses R reticulate package run python commands subset data metadata column ( .e. column adata.obs) write susbet separate AnnData objects .h5ad files.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/summariseIGHreads.html","id":null,"dir":"Reference","previous_headings":"","what":"cast data frame IGH counts into a matrix — summariseIGHreads","title":"cast data frame IGH counts into a matrix — summariseIGHreads","text":"summariseIGHreads converts data.frame sterile/productive IGH molecules count matrix.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/summariseIGHreads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cast data frame IGH counts into a matrix — summariseIGHreads","text":"","code":"summariseIGHreads(tb, definitions)"},{"path":"https://http://josephng-bio.org/sciCSR/reference/summariseIGHreads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cast data frame IGH counts into a matrix — summariseIGHreads","text":"tb data.frame, output getIGHreadType. definitions list GenomicRanges::GRanges object, specifying genomic coordinates VDJ genes, C genes coding segments sterile C transcripts. See data objects 'human_definitions' 'mouse_definitions' sciCSR package formats.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/summariseIGHreads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cast data frame IGH counts into a matrix — summariseIGHreads","text":"array cell barcode IGH gene type (.e. S/P/C per C gene)","code":""},{"path":"https://http://josephng-bio.org/sciCSR/reference/summariseIGHreads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"cast data frame IGH counts into a matrix — summariseIGHreads","text":"function count molecules classified Sterile (S), Productive (P) C-(C) isotype, molecules per cell barcode cast count matrix cell barcodes IGH molecule type.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/news/index.html","id":"scicsr-021-feb-1-2023","dir":"Changelog","previous_headings":"","what":"sciCSR 0.2.1 (Feb 1, 2023)","title":"sciCSR 0.2.1 (Feb 1, 2023)","text":"fixed issues re distributed computing python across MacOS Windows. added functions basic scRNA-seq data preprocessing (normalise_dimreduce) includes customisable pruning variably expressed genes, collapse VDJ (genes) metagenes etc (collapseIntoMetaGenes).","code":""},{"path":"https://http://josephng-bio.org/sciCSR/news/index.html","id":"scicsr-020-jan-30-2023","dir":"Changelog","previous_headings":"","what":"sciCSR 0.2.0 (Jan 30, 2023)","title":"sciCSR 0.2.0 (Jan 30, 2023)","text":"removed velocyto.R dependency avoid installation problems. fixed minor issues cross-platform (MacOS / Linux) installation use. fixed issues multiprocessing TPT calculations. added NEWS.md file track changes package. functional vignette site via pkgdown.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/news/index.html","id":"scicsr-011-jan-16-2023","dir":"Changelog","previous_headings":"","what":"sciCSR 0.1.1 (Jan 16, 2023)","title":"sciCSR 0.1.1 (Jan 16, 2023)","text":"added new functions plotting TPT isotype results. NMF-based calculation CSR potential. functions merge repertoire. plot arrow-style velocity streams -la-scVelo.","code":""},{"path":"https://http://josephng-bio.org/sciCSR/news/index.html","id":"scicsr-010-sep-8-2022","dir":"Changelog","previous_headings":"","what":"sciCSR 0.1.0 (Sep 8, 2022)","title":"sciCSR 0.1.0 (Sep 8, 2022)","text":"first version working package.","code":""}]
